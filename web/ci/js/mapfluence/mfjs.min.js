(function(){
    var version="2.0.b2";
    var globalOpts={
        mfjsDebug:false
    };
    
    if(!window.MF){
        window.MF={}
    }
    if(!MF.Globals){
    MF.Globals=globalOpts
    }else{
    for(var key in globalOpts){
        if(MF.Globals[key]===undefined){
            MF.Globals[key]=globalOpts[key]
            }
        }
    }
    MF.Globals.MFJS_VERSION=version;
if(!MF.core){
    MF.core={}
}
if(MF.Globals.mfjsDebug&&console!==undefined){
    MF.console=console
    }else{
    MF.console={
        log:function(){}
    }
}
if(!window.com){
    window.com={}
}
if(!window.MM){
    window.MM={}
}
if(!com.modestmaps){
    com.modestmaps=MM
    }
    MF.jsRoot=function(filename){
    var scripts=document.documentElement.getElementsByTagName("script"),i=scripts.length,scriptSrc;
    while(i--){
        scriptSrc=scripts[i].src;
        if(scriptSrc&&scriptSrc.substr(scriptSrc.length-filename.length)===filename){
            return scriptSrc.substr(0,scriptSrc.length-filename.length)
            }
        }
    return""
};

MF.initializeDebug=function(){};

if(!window.JSON){
    var s=document.getElementsByTagName("script")[0],lib=document.createElement("script");
    lib.type="text/javascript";
    lib.src="http://static.mapfluence.com/lib/json2.min.js";
    s.parentNode.insertBefore(lib,s)
    }
}());
(function(){
    MM.extend=function(child,parent){
        for(var property in parent.prototype){
            if(typeof child.prototype[property]=="undefined"){
                child.prototype[property]=parent.prototype[property]
                }
            }
        return child
    };
    
MM.cancelEvent=function(e){
    e.cancelBubble=true;
    e.cancel=true;
    e.returnValue=false;
    if(e.stopPropagation){
        e.stopPropagation()
        }
        if(e.preventDefault){
        e.preventDefault()
        }
        return false
    };
    
MM.addEvent=function(obj,type,fn){
    if(obj.attachEvent){
        obj["e"+type+fn]=fn;
        obj[type+fn]=function(){
            obj["e"+type+fn](window.event)
            };
            
        obj.attachEvent("on"+type,obj[type+fn])
        }else{
        obj.addEventListener(type,fn,false);
        if(type=="mousewheel"){
            obj.addEventListener("DOMMouseScroll",fn,false)
            }
        }
};

MM.removeEvent=function(obj,type,fn){
    if(obj.detachEvent){
        obj.detachEvent("on"+type,obj[type+fn]);
        obj[type+fn]=null
        }else{
        obj.removeEventListener(type,fn,false);
        if(type=="mousewheel"){
            obj.removeEventListener("DOMMouseScroll",fn,false)
            }
        }
};

MM.getStyle=function(el,styleProp){
    if(el.currentStyle){
        var y=el.currentStyle[styleProp]
        }else{
        if(window.getComputedStyle){
            var y=document.defaultView.getComputedStyle(el,null).getPropertyValue(styleProp)
            }
        }
    return y
};

if(window.console===undefined){
    MM.console=window.console
    }else{
    MM.console={
        assert:function(){},
        log:function(){},
        info:function(){},
        warn:function(){},
        error:function(){},
        exception:function(){},
        trace:function(){},
        debug:function(){}
    }
}
}());
(function(){
    MM.Point=function(x,y){
        this.x=parseFloat(x);
        this.y=parseFloat(y)
        };
        
    MM.Point.prototype={
        x:0,
        y:0,
        toString:function(){
            return"("+this.x.toFixed(3)+", "+this.y.toFixed(3)+")"
            }
        };
    
MM.Point.distance=function(p1,p2){
    var dx=(p2.x-p1.x);
    var dy=(p2.y-p1.y);
    return Math.sqrt(dx*dx+dy*dy)
    };
    
MM.Point.interpolate=function(p1,p2,t){
    var px=p1.x+(p2.x-p1.x)*t;
    var py=p1.y+(p2.y-p1.y)*t;
    return new MM.Point(px,py)
    }
}());
(function(){
    MM.Coordinate=function(row,column,zoom){
        this.row=row;
        this.column=column;
        this.zoom=zoom
        };
        
    MM.Coordinate.prototype={
        row:0,
        column:0,
        zoom:0,
        toString:function(){
            return"("+this.row.toFixed(3)+", "+this.column.toFixed(3)+" @"+this.zoom.toFixed(3)+")"
            },
        toKey:function(){
            return[Math.floor(this.zoom),Math.floor(this.column),Math.floor(this.row)].join(",")
            },
        copy:function(){
            return new MM.Coordinate(this.row,this.column,this.zoom)
            },
        container:function(){
            return new MM.Coordinate(Math.floor(this.row),Math.floor(this.column),Math.floor(this.zoom))
            },
        zoomTo:function(destination){
            var power=Math.pow(2,destination-this.zoom);
            return new MM.Coordinate(this.row*power,this.column*power,destination)
            },
        zoomBy:function(distance){
            var power=Math.pow(2,distance);
            return new MM.Coordinate(this.row*power,this.column*power,this.zoom+distance)
            },
        up:function(dist){
            if(dist===undefined){
                dist=1
                }
                return new MM.Coordinate(this.row-dist,this.column,this.zoom)
            },
        right:function(dist){
            if(dist===undefined){
                dist=1
                }
                return new MM.Coordinate(this.row,this.column+dist,this.zoom)
            },
        down:function(dist){
            if(dist===undefined){
                dist=1
                }
                return new MM.Coordinate(this.row+dist,this.column,this.zoom)
            },
        left:function(dist){
            if(dist===undefined){
                dist=1
                }
                return new MM.Coordinate(this.row,this.column-dist,this.zoom)
            }
        }
}());
(function(){
    MM.Location=function(lat,lon){
        this.lat=parseFloat(lat);
        this.lon=parseFloat(lon)
        };
        
    MM.Location.prototype={
        lat:0,
        lon:0,
        toString:function(){
            return"("+this.lat.toFixed(3)+", "+this.lon.toFixed(3)+")"
            }
        };
    
MM.Location.distance=function(l1,l2,r){
    if(!r){
        r=6378000
        }
        var deg2rad=Math.PI/180,a1=l1.lat*deg2rad,b1=l1.lon*deg2rad,a2=l2.lat*deg2rad,b2=l2.lon*deg2rad,c=Math.cos(a1)*Math.cos(b1)*Math.cos(a2)*Math.cos(b2),d=Math.cos(a1)*Math.sin(b1)*Math.cos(a2)*Math.sin(b2),e=Math.sin(a1)*Math.sin(a2);
    return Math.acos(c+d+e)*r
    };
    
MM.Location.interpolate=function(l1,l2,f){
    var deg2rad=Math.PI/180,lat1=l1.lat*deg2rad,lon1=l1.lon*deg2rad,lat2=l2.lat*deg2rad,lon2=l2.lon*deg2rad;
    var d=2*Math.asin(Math.sqrt(Math.pow(Math.sin((lat1-lat2)/2),2)+Math.cos(lat1)*Math.cos(lat2)*Math.pow(Math.sin((lon1-lon2)/2),2)));
    var bearing=Math.atan2(Math.sin(lon1-lon2)*Math.cos(lat2),Math.cos(lat1)*Math.sin(lat2)-Math.sin(lat1)*Math.cos(lat2)*Math.cos(lon1-lon2))/-(Math.PI/180);
    bearing=bearing<0?360+bearing:bearing;
    var A=Math.sin((1-f)*d)/Math.sin(d);
    var B=Math.sin(f*d)/Math.sin(d);
    var x=A*Math.cos(lat1)*Math.cos(lon1)+B*Math.cos(lat2)*Math.cos(lon2);
    var y=A*Math.cos(lat1)*Math.sin(lon1)+B*Math.cos(lat2)*Math.sin(lon2);
    var z=A*Math.sin(lat1)+B*Math.sin(lat2);
    var latN=Math.atan2(z,Math.sqrt(Math.pow(x,2)+Math.pow(y,2)));
    var lonN=Math.atan2(y,x);
    return new MM.Location(latN/deg2rad,lonN/deg2rad)
    }
}());
(function(){
    MM.Transformation=function(ax,bx,cx,ay,by,cy){
        this.ax=ax;
        this.bx=bx;
        this.cx=cx;
        this.ay=ay;
        this.by=by;
        this.cy=cy
        };
        
    MM.Transformation.prototype={
        ax:0,
        bx:0,
        cx:0,
        ay:0,
        by:0,
        cy:0,
        transform:function(point){
            return new MM.Point(this.ax*point.x+this.bx*point.y+this.cx,this.ay*point.x+this.by*point.y+this.cy)
            },
        untransform:function(point){
            return new MM.Point((point.x*this.by-point.y*this.bx-this.cx*this.by+this.cy*this.bx)/(this.ax*this.by-this.ay*this.bx),(point.x*this.ay-point.y*this.ax-this.cx*this.ay+this.cy*this.ax)/(this.bx*this.ay-this.by*this.ax))
            }
        };
    
MM.deriveTransformation=function(a1x,a1y,a2x,a2y,b1x,b1y,b2x,b2y,c1x,c1y,c2x,c2y){
    var x=MM.linearSolution(a1x,a1y,a2x,b1x,b1y,b2x,c1x,c1y,c2x);
    var y=MM.linearSolution(a1x,a1y,a2y,b1x,b1y,b2y,c1x,c1y,c2y);
    return new MM.Transformation(x[0],x[1],x[2],y[0],y[1],y[2])
    };
    
MM.linearSolution=function(r1,s1,t1,r2,s2,t2,r3,s3,t3){
    r1=parseFloat(r1);
    s1=parseFloat(s1);
    t1=parseFloat(t1);
    r2=parseFloat(r2);
    s2=parseFloat(s2);
    t2=parseFloat(t2);
    r3=parseFloat(r3);
    s3=parseFloat(s3);
    t3=parseFloat(t3);
    var a=(((t2-t3)*(s1-s2))-((t1-t2)*(s2-s3)))/(((r2-r3)*(s1-s2))-((r1-r2)*(s2-s3)));
    var b=(((t2-t3)*(r1-r2))-((t1-t2)*(r2-r3)))/(((s2-s3)*(r1-r2))-((s1-s2)*(r2-r3)));
    var c=t1-(r1*a)-(s1*b);
    return[a,b,c]
    }
}());
(function(){
    MM.Projection=function(zoom,transformation){
        if(!transformation){
            transformation=new MM.Transformation(1,0,0,0,1,0)
            }
            this.zoom=zoom;
        this.transformation=transformation
        };
        
    MM.Projection.prototype={
        zoom:0,
        transformation:null,
        rawProject:function(point){
            alert("Abstract method not implemented by subclass.")
            },
        rawUnproject:function(point){
            alert("Abstract method not implemented by subclass.")
            },
        project:function(point){
            point=this.rawProject(point);
            if(this.transformation){
                point=this.transformation.transform(point)
                }
                return point
            },
        unproject:function(point){
            if(this.transformation){
                point=this.transformation.untransform(point)
                }
                point=this.rawUnproject(point);
            return point
            },
        locationCoordinate:function(location){
            var point=new MM.Point(Math.PI*location.lon/180,Math.PI*location.lat/180);
            point=this.project(point);
            return new MM.Coordinate(point.y,point.x,this.zoom)
            },
        coordinateLocation:function(coordinate){
            coordinate=coordinate.zoomTo(this.zoom);
            var point=new MM.Point(coordinate.column,coordinate.row);
            point=this.unproject(point);
            return new MM.Location(180*point.y/Math.PI,180*point.x/Math.PI)
            }
        };
    
MM.LinearProjection=function(zoom,transformation){
    MM.Projection.call(this,zoom,transformation)
    };
    
MM.LinearProjection.prototype={
    rawProject:function(point){
        return new MM.Point(point.x,point.y)
        },
    rawUnproject:function(point){
        return new MM.Point(point.x,point.y)
        }
    };

MM.extend(MM.LinearProjection,MM.Projection);
    MM.MercatorProjection=function(zoom,transformation){
    MM.Projection.call(this,zoom,transformation)
    };
    
MM.MercatorProjection.prototype={
    rawProject:function(point){
        return new MM.Point(point.x,Math.log(Math.tan(0.25*Math.PI+0.5*point.y)))
        },
    rawUnproject:function(point){
        return new MM.Point(point.x,2*Math.atan(Math.pow(Math.E,point.y))-0.5*Math.PI)
        }
    };

MM.extend(MM.MercatorProjection,MM.Projection)
}());
(function(){
    MM.MapProvider=function(){};
    
    MM.MapProvider.prototype={
        type:null,
        projection:new MM.MercatorProjection(0,MM.deriveTransformation(-Math.PI,Math.PI,0,0,Math.PI,Math.PI,1,0,-Math.PI,-Math.PI,0,1)),
        topLeftOuterLimit:new MM.Coordinate(0,0,0),
        bottomRightInnerLimit:new MM.Coordinate(1,1,0).zoomTo(18),
        locationCoordinate:function(location){
            return this.projection.locationCoordinate(location)
            },
        coordinateLocation:function(location){
            return this.projection.coordinateLocation(location)
            },
        outerLimits:function(){
            return[this.topLeftOuterLimit.copy(),this.bottomRightInnerLimit.copy()]
            },
        sourceCoordinate:function(coord){
            var TL=this.topLeftOuterLimit.zoomTo(coord.zoom);
            var BR=this.bottomRightInnerLimit.zoomTo(coord.zoom);
            var vSize=BR.row-TL.row;
            if(coord.row<0|coord.row>=vSize){
                return null
                }
                var hSize=BR.column-TL.column;
            var wrappedColumn=coord.column%hSize;
            while(wrappedColumn<0){
                wrappedColumn+=hSize
                }
                return new MM.Coordinate(coord.row,wrappedColumn,coord.zoom)
            }
        };
    
MM.VectorProvider=function(draw,position){
    MM.MapProvider.call(this);
    this.type="vector";
    if(draw){
        this.draw=draw
        }
        if(position){
        this.position=position
        }
    };

MM.VectorProvider.prototype={
    draw:function(map,container){
        alert("Abstract method draw not implemented by object of MM.VectorProvider.")
        },
    position:function(map,container){
        alert("Abstract method position not implemented by object of MM.VectorProvider.")
        }
    };

MM.extend(MM.VectorProvider,MM.MapProvider);
MM.TileProvider=function(getTileUrl){
    MM.MapProvider.call(this);
    this.type="tile";
    if(getTileUrl){
        this.getTileUrl=getTileUrl
        }
    };

MM.TileProvider.prototype={
    tileDimensions:{
        x:256,
        y:256
    },
    zoomInnerLimit:18,
    zoomOuterLimit:0,
    getTileUrl:function(coordinate){
        alert("Abstract method not implemented by subclass.")
        }
    };

MM.extend(MM.TileProvider,MM.MapProvider);
MM.TemplatedTileProvider=function(template,subdomains){
    MM.TileProvider.call(this,function(coordinate){
        coordinate=this.sourceCoordinate(coordinate);
        if(!coordinate){
            return null
            }
            var base=template;
        if(subdomains&&subdomains.length&&base.indexOf("{S}")>=0){
            var subdomain=parseInt(coordinate.zoom+coordinate.row+coordinate.column)%subdomains.length;
            base=base.replace("{S}",subdomains[subdomain])
            }
            return base.replace("{Z}",coordinate.zoom.toFixed(0)).replace("{X}",coordinate.column.toFixed(0)).replace("{Y}",coordinate.row.toFixed(0))
        })
    };
    
MM.extend(MM.TemplatedTileProvider,MM.TileProvider)
}());
(function(){
    MM.MouseHandler=function(map){
        if(map!==undefined){
            this.init(map)
            }
        };
    
MM.MouseHandler.prototype={
    init:function(map){
        this.map=map;
        MM.addEvent(map.parent,"dblclick",this.getDoubleClick());
        MM.addEvent(map.parent,"mousedown",this.getMouseDown());
        MM.addEvent(map.parent,"mousewheel",this.getMouseWheel())
        },
    mouseDownHandler:null,
    getMouseDown:function(){
        if(!this.mouseDownHandler){
            var theHandler=this;
            this.mouseDownHandler=function(e){
                MM.addEvent(document,"mouseup",theHandler.getMouseUp());
                MM.addEvent(document,"mousemove",theHandler.getMouseMove());
                theHandler.prevMouse=new MM.Point(e.clientX,e.clientY);
                theHandler.map.parent.style.cursor="move";
                return MM.cancelEvent(e)
                }
            }
        return this.mouseDownHandler
    },
mouseMoveHandler:null,
getMouseMove:function(){
    if(!this.mouseMoveHandler){
        var theHandler=this;
        this.mouseMoveHandler=function(e){
            if(theHandler.prevMouse){
                theHandler.map.panBy(e.clientX-theHandler.prevMouse.x,e.clientY-theHandler.prevMouse.y);
                theHandler.prevMouse.x=e.clientX;
                theHandler.prevMouse.y=e.clientY
                }
                return MM.cancelEvent(e)
            }
        }
    return this.mouseMoveHandler
},
mouseUpHandler:null,
getMouseUp:function(){
    if(!this.mouseUpHandler){
        var theHandler=this;
        this.mouseUpHandler=function(e){
            MM.removeEvent(document,"mouseup",theHandler.getMouseUp());
            MM.removeEvent(document,"mousemove",theHandler.getMouseMove());
            theHandler.prevMouse=null;
            theHandler.map.parent.style.cursor="";
            return MM.cancelEvent(e)
            }
        }
    return this.mouseUpHandler
},
mouseWheelHandler:null,
getMouseWheel:function(){
    if(!this.mouseWheelHandler){
        var theHandler=this;
        var prevTime=new Date().getTime();
        this.mouseWheelHandler=function(e){
            var delta=0;
            if(e.wheelDelta){
                delta=e.wheelDelta
                }else{
                if(e.detail){
                    delta=-e.detail
                    }
                }
            var timeSince=new Date().getTime()-prevTime;
        if(Math.abs(delta)>0&&(timeSince>200)){
            var point=theHandler.getMousePoint(e);
            theHandler.map.zoomByAbout(delta>0?1:-1,point);
            prevTime=new Date().getTime()
            }
            return MM.cancelEvent(e)
        }
    }
return this.mouseWheelHandler
},
doubleClickHandler:null,
getDoubleClick:function(){
    if(!this.doubleClickHandler){
        var theHandler=this;
        this.doubleClickHandler=function(e){
            var point=theHandler.getMousePoint(e);
            theHandler.map.zoomByAbout(e.shiftKey?-1:1,point);
            return MM.cancelEvent(e)
            }
        }
    return this.doubleClickHandler
},
getMousePoint:function(e){
    var point=new MM.Point(e.clientX,e.clientY);
    point.x+=document.body.scrollLeft+document.documentElement.scrollLeft;
    point.y+=document.body.scrollTop+document.documentElement.scrollTop;
    for(var node=this.map.parent;node;node=node.offsetParent){
        point.x-=node.offsetLeft;
        point.y-=node.offsetTop
        }
        return point
    }
}
}());
(function(){
    MM.CallbackManager=function(owner,events){
        this.owner=owner;
        this.callbacks={};
        
        for(var i=0;i<events.length;i++){
            this.callbacks[events[i]]=[]
            }
        };
        
MM.CallbackManager.prototype={
    owner:null,
    callbacks:null,
    addCallback:function(event,callback){
        if(typeof(callback)=="function"&&this.callbacks[event]){
            this.callbacks[event].push(callback)
            }
        },
removeCallback:function(event,callback){
    if(typeof(callback)=="function"&&this.callbacks[event]){
        var cbs=this.callbacks[event],len=cbs.length;
        for(var i=0;i<len;i++){
            if(cbs[i]===callback){
                cbs.splice(i,1);
                break
            }
        }
        }
},
dispatchCallback:function(event,message){
    if(this.callbacks[event]){
        for(var i=0;i<this.callbacks[event].length;i+=1){
            try{
                this.callbacks[event][i](this.owner,message)
                }catch(e){}
        }
        }
}
}
}());
(function(){
    MM.RequestManager=function(parent){
        this.loadingBay=document.createElement("div");
        this.loadingBay.id=parent.id+"-loading-bay";
        this.loadingBay.style.display="none";
        parent.appendChild(this.loadingBay);
        this.requestsByKey={};
        
        this.openRequestCount=0;
        this.maxOpenRequests=4;
        this.requestQueue=[];
        this.callbackManager=new MM.CallbackManager(this,["requestcomplete"])
        };
        
    MM.RequestManager.prototype={
        loadingBay:null,
        requestsByKey:null,
        requestQueue:null,
        openRequestCount:null,
        maxOpenRequests:null,
        callbackManager:null,
        addCallback:function(event,callback){
            this.callbackManager.addCallback(event,callback)
            },
        removeCallback:function(event,callback){
            this.callbackManager.removeCallback(event,callback)
            },
        dispatchCallback:function(event,message){
            this.callbackManager.dispatchCallback(event,message)
            },
        getKeys:function(){
            var keys=[];
            for(var i=0;i<this.requestQueue.length;i++){
                var request=this.requestQueue[i];
                if(request){
                    keys.push(request.key)
                    }
                }
            return keys
        },
    clear:function(){
        this.clearExcept({})
        },
    clearOnly:function(invalidKeys){
        var allKeys=this.getKeys(),validKeysDict={},i=allKeys.length;
        while(--i>=0){
            if(!(allKeys[i] in invalidKeys)){
                validKeysDict[allKeys[i]]=null
                }
            }
        this.clearExcept(validKeysDict)
    },
clearExcept:function(validKeys){
    for(var i=0;i<this.requestQueue.length;i++){
        var request=this.requestQueue[i];
        if(request&&!(request.key in validKeys)){
            this.requestQueue[i]=null
            }
        }
    var openRequests=this.loadingBay.getElementsByTagName("img");
    for(var i=openRequests.length;--i>=0;){
    var img=openRequests[i];
    if(!(img.key in validKeys)){
        this.loadingBay.removeChild(img);
        this.openRequestCount--;
        delete this.requestsByKey[img.key];
        img.src=img.coord=img.onload=img.onerror=null
        }
    }
for(var key in this.requestsByKey){
    if(this.requestsByKey.hasOwnProperty(key)){
        if(!(key in validKeys)){
            var request=this.requestsByKey[key];
            delete this.requestsByKey[key];
            if(request!==null){
                request=request.key=request.coord=request.url=null
                }
            }
    }
}
},
hasRequest:function(key){
    return(key in this.requestsByKey)
    },
requestTile:function(key,coord,url){
    if(!(key in this.requestsByKey)){
        var request={
            key:key,
            coord:coord.copy(),
            url:url
        };
        
        this.requestsByKey[key]=request;
        if(url){
            this.requestQueue.push(request)
            }
        }
},
processQueue:function(sortFunc){
    if(sortFunc&&this.requestQueue.length>8){
        this.requestQueue.sort(sortFunc)
        }while(this.openRequestCount<this.maxOpenRequests&&this.requestQueue.length>0){
        var request=this.requestQueue.pop();
        if(request){
            this.openRequestCount++;
            var img=document.createElement("img");
            img.key=request.key;
            img.style.position="absolute";
            img.coord=request.coord;
            this.loadingBay.appendChild(img);
            img.onload=img.onerror=this.getLoadComplete();
            img.src=request.url;
            if(img.src==""){
                MF.console.log("empty url in request")
                }
                request=request.key=request.coord=request.url=null
            }
        }
},
_loadComplete:null,
getLoadComplete:function(){
    if(!this._loadComplete){
        var theManager=this;
        this._loadComplete=function(e){
            e=e||window.event;
            window.setTimeout(function(){
                theManager.processQueue()
                },0);
            var img=e.srcElement||e.target;
            img.onload=img.onerror=null;
            theManager.loadingBay.removeChild(img);
            theManager.openRequestCount--;
            delete theManager.requestsByKey[img.key];
            if(img.complete||(img.readyState&&img.readyState==="complete")){
                theManager.dispatchCallback("requestcomplete",img)
                }else{
                img.src=null
                }
            }
    }
return this._loadComplete
}
}
}());
(function(){
    MM.Map=function(parent,tileProvider,opts){
        this.debug=false;
        opts=opts||{};
        
        if(typeof parent==="string"){
            parent=document.getElementById(parent)
            }
            this.parent=parent;
        if(MM.Map.nextId===undefined){
            MM.Map.nextId=1
            }
            this.id=MM.Map.nextId++;
        this.parent.style.padding="0";
        this.parent.style.overflow="hidden";
        var position=MM.getStyle(this.parent,"position");
        if(position!=="relative"&&position!=="absolute"){
            this.parent.style.position="relative"
            }
            if(!opts.dimensions){
            var w=this.parent.offsetWidth;
            var h=this.parent.offsetHeight;
            if(!w){
                w=640;
                this.parent.style.width=w+"px"
                }
                if(!h){
                h=480;
                this.parent.style.height=h+"px"
                }
                opts.dimensions=new MM.Point(w,h);
            var theMap=this;
            MM.addEvent(window,"resize",function(event){
                theMap.dimensions=new MM.Point(theMap.parent.offsetWidth,theMap.parent.offsetHeight);
                theMap.updateCacheLimits();
                theMap.draw();
                theMap.dispatchCallback("resized",[theMap.dimensions])
                })
            }else{
            this.parent.style.width=Math.round(opts.dimensions.x)+"px";
            this.parent.style.height=Math.round(opts.dimensions.y)+"px"
            }
            this.dimensions=opts.dimensions;
        this.tileDimensions=tileProvider.tileDimensions;
        this.requestManager=new MM.RequestManager(this.parent);
        this.requestManager.addCallback("requestcomplete",this.getTileComplete());
        this.layers=[];
        this.projection=tileProvider.projection;
        this.coordinate=new MM.Coordinate(0.5,0.5,0);
        this.addLayer(tileProvider);
        this.enablePyramidLoading=false;
        this.callbackManager=new MM.CallbackManager(this,["zoomed","panned","centered","extentset","resized","drawn"]);
        if(opts.eventHandlers===undefined){
            this.eventHandlers=[];
            this.eventHandlers.push(new MM.MouseHandler(this))
            }else{
            this.eventHandlers=opts.eventHandlers;
            if(opts.eventHandlers instanceof Array){
                var i;
                for(i=0;i<opts.eventHandlers.length;i++){
                    opts.eventHandlers[i].init(this)
                    }
                }
            }
};

MM.Map.prototype={
    parent:null,
    dimensions:null,
    coordinate:null,
    tiles:null,
    zoomLevels:null,
    zoomLevelsParent:null,
    minZoom:0,
    maxZoom:18,
    tilePadding:0,
    layers:null,
    maxRedrawDelay:1000,
    minCheckCacheDelay:1000,
    cacheMultiple:4,
    projection:null,
    requestManager:null,
    callbackManager:null,
    eventHandlers:null,
    toString:function(){
        return"Map(#"+this.parent.id+")"
        },
    addCallback:function(event,callback){
        this.callbackManager.addCallback(event,callback)
        },
    removeCallback:function(event,callback){
        this.callbackManager.removeCallback(event,callback)
        },
    dispatchCallback:function(event,message){
        this.callbackManager.dispatchCallback(event,message)
        },
    zoomBy:function(zoomOffset){
        this.coordinate=this.coordinate.zoomBy(zoomOffset);
        this.draw();
        this.dispatchCallback("zoomed",zoomOffset)
        },
    zoomIn:function(){
        this.zoomBy(1)
        },
    zoomOut:function(){
        this.zoomBy(-1)
        },
    setZoom:function(z){
        this.zoomBy(z-this.coordinate.zoom)
        },
    zoomByAbout:function(zoomOffset,point){
        var location=this.pointLocation(point);
        this.zoomBy(zoomOffset);
        var newPoint=this.locationPoint(location);
        this.panBy(point.x-newPoint.x,point.y-newPoint.y)
        },
    panBy:function(dx,dy){
        this.coordinate.column-=dx/this.tileDimensions.x;
        this.coordinate.row-=dy/this.tileDimensions.y;
        this.draw();
        this.dispatchCallback("panned",[dx,dy])
        },
    panLeft:function(){
        this.panBy(100,0)
        },
    panRight:function(){
        this.panBy(-100,0)
        },
    panDown:function(){
        this.panBy(0,-100)
        },
    panUp:function(){
        this.panBy(0,100)
        },
    setCenter:function(location){
        this.setCenterZoom(location,this.coordinate.zoom)
        },
    setCenterZoom:function(location,zoom){
        this.coordinate=this.locationCoordinate(location).zoomTo(parseFloat(zoom)||0);
        this.draw();
        this.dispatchCallback("centered",[location,zoom])
        },
    setExtent:function(locations){
        var TL,BR;
        var i;
        for(i=0;i<locations.length;i++){
            var coordinate=this.locationCoordinate(locations[i]);
            if(TL){
                TL.row=Math.min(TL.row,coordinate.row);
                TL.column=Math.min(TL.column,coordinate.column);
                TL.zoom=Math.min(TL.zoom,coordinate.zoom);
                BR.row=Math.max(BR.row,coordinate.row);
                BR.column=Math.max(BR.column,coordinate.column);
                BR.zoom=Math.max(BR.zoom,coordinate.zoom)
                }else{
                TL=coordinate.copy();
                BR=coordinate.copy()
                }
            }
        var width=this.dimensions.x+1;
    var height=this.dimensions.y+1;
    var hFactor=(BR.column-TL.column)/(width/this.tileDimensions.x);
    var hZoomDiff=Math.log(hFactor)/Math.log(2);
    var hPossibleZoom=TL.zoom-Math.ceil(hZoomDiff);
    var vFactor=(BR.row-TL.row)/(height/this.tileDimensions.y);
    var vZoomDiff=Math.log(vFactor)/Math.log(2);
    var vPossibleZoom=TL.zoom-Math.ceil(vZoomDiff);
    var initZoom=Math.min(hPossibleZoom,vPossibleZoom);
    initZoom=Math.min(initZoom,this.maxZoom);
    initZoom=Math.max(initZoom,this.minZoom);
    var centerRow=(TL.row+BR.row)/2;
    var centerColumn=(TL.column+BR.column)/2;
    var centerZoom=TL.zoom;
    this.coordinate=new MM.Coordinate(centerRow,centerColumn,centerZoom).zoomTo(initZoom);
    this.draw();
    this.dispatchCallback("extentset",locations)
    },
setSize:function(dimensionsOrX,orY){
    if(dimensionsOrX.hasOwnProperty("x")&&dimensionsOrX.hasOwnProperty("y")){
        this.dimensions=dimensionsOrX
        }else{
        if(orY!==undefined&&!isNaN(orY)){
            this.dimensions=new MM.Point(dimensionsOrX,orY)
            }
        }
    this.parent.style.width=Math.round(this.dimensions.x)+"px";
this.parent.style.height=Math.round(this.dimensions.y)+"px";
this.updateCacheLimits();
this.draw();
this.dispatchCallback("resized",[this.dimensions])
},
coordinatePoint:function(coord){
    if(coord.zoom!==this.coordinate.zoom){
        coord=coord.zoomTo(this.coordinate.zoom)
        }
        var point=new MM.Point(this.dimensions.x/2,this.dimensions.y/2);
    point.x+=this.tileDimensions.x*(coord.column-this.coordinate.column);
    point.y+=this.tileDimensions.y*(coord.row-this.coordinate.row);
    return point
    },
pointCoordinate:function(point){
    var coord=this.coordinate.copy();
    coord.column+=(point.x-this.dimensions.x/2)/this.tileDimensions.x;
    coord.row+=(point.y-this.dimensions.y/2)/this.tileDimensions.y;
    return coord
    },
locationPoint:function(location){
    return this.coordinatePoint(this.locationCoordinate(location))
    },
pointLocation:function(point){
    return this.coordinateLocation(this.pointCoordinate(point))
    },
getExtent:function(){
    var extent=[];
    extent.push(this.pointLocation(new MM.Point(0,0)));
    extent.push(this.pointLocation(this.dimensions));
    return extent
    },
getCenter:function(){
    return this.coordinateLocation(this.coordinate)
    },
getZoom:function(){
    return this.coordinate.zoom
    },
newLayer:function(provider,zIndex){
    if(this.newLayer.nextId===undefined){
        this.newLayer.nextId=1
        }
        var layer;
    var wrapper=document.createElement("div");
    wrapper.id="map-"+this.id+"-layer-"+this.newLayer.nextId++;
    wrapper.style.cssText="position: absolute; top: 0px; left: 0px; width: 100%; height: 100%; margin: 0; padding: 0; z-index: "+zIndex;
    this.parent.appendChild(wrapper);
    layer={
        isVector:provider.type==="vector",
        provider:provider,
        zoomLevelsParent:wrapper,
        zoomLevels:{},
        tiles:{},
        tileCacheSize:0,
        maxTileCacheSize:this.getCacheLimit(),
        recentTiles:[],
        recentTilesById:{}
};

return layer
},
addLayer:function(provider){
    this.insertLayerAt(provider,this.layers.length)
    },
insertLayerAt:function(provider,index){
    if(provider.type==="tile"){
        if(provider.projection!==this.projection){
            throw"map providers must use same projection"
            }
            if(provider.tileDimensions.x!==this.tileDimensions.x||provider.tileDimensions.y!==this.tileDimensions.y){
            throw"map providers must have same tile dimensions"
            }
        }
    if(index>=this.layers.length){
    index=this.layers.length
    }else{
    alert("not yet implemented");
    throw"not yet implemented"
    }
    this.layers[index]=this.newLayer(provider,index*32);
if(this.layers.length>1){
    this.draw()
    }
},
removeLayer:function(provider){
    var layerIndex,layer;
    MM.console.info(this.layers.length+" "+this.layers);
    for(layerIndex=0;layerIndex<this.layers.length;layerIndex++){
        layer=this.layers[layerIndex];
        if(provider==layer.provider){
            MM.console.info(""+layerIndex+" "+layer);
            $(layer.zoomLevelsParent).remove();
            this.requestManager.clearOnly(layer.tiles);
            layer.tiles={};
            
            layer.tileCacheSize=0;
            this.recentTiles=[];
            this.recentTilesById={};
            
            MF.util.sliceArray(this.layers,layerIndex)
            }
        }
    },
enforceLimits:function(coord){
    coord=coord.copy();
    if(coord.zoom<this.minZoom){
        coord=coord.zoomTo(this.minZoom)
        }else{
        if(coord.zoom>this.maxZoom){
            coord=coord.zoomTo(this.maxZoom)
            }
        }
    return coord
},
draw:function(){
    this.coordinate=this.enforceLimits(this.coordinate);
    var baseZoom=Math.round(this.coordinate.zoom);
    var startCoord=this.pointCoordinate(new MM.Point(0,0)).zoomTo(baseZoom).container();
    var endCoord=this.pointCoordinate(this.dimensions).zoomTo(baseZoom).container().right().down();
    if(this.tilePadding){
        startCoord=startCoord.left(this.tilePadding).up(this.tilePadding);
        endCoord=endCoord.right(this.tilePadding).down(this.tilePadding)
        }
        var now=new Date().getTime();
    var validTileKeys={};
    
    var layerIndex;
    for(layerIndex=0;layerIndex<this.layers.length;layerIndex++){
        this.drawLayer(layerIndex,startCoord,endCoord,now,validTileKeys)
        }
        this.requestManager.clearExcept(validTileKeys);
    this.requestManager.processQueue(this.getCenterDistanceCompare());
    this.checkCache();
    this.dispatchCallback("drawn")
    },
encodeTileKey:function(layerIndex,coord){
    return[this.id,layerIndex,Math.floor(coord.zoom),Math.floor(coord.column),Math.floor(coord.row)].join(",")
    },
decodeTileKey:function(key){
    var a=key.split(",");
    return{
        mapId:parseInt(a[0]),
        layerIndex:parseInt(a[1]),
        zoom:parseInt(a[2]),
        column:parseInt(a[3]),
        row:parseInt(a[4])
        }
    },
newTileDiv:function(layer,tileKey,coord){
    var tile=document.createElement("div");
    tile.id=tileKey;
    tile.style.position="absolute";
    tile.style.overflow="hidden";
    tile.loaded=false;
    tile.coord=coord.copy();
    layer.zoomLevels[coord.zoom].appendChild(tile);
    return tile
    },
newTileImg:function(layer,tileKey,coord){
    var tile=document.createElement("img");
    tile.id=tileKey;
    tile.style.position="absolute";
    tile.style.display="none";
    tile.style.overflow="hidden";
    tile.src=null;
    tile.loaded=false;
    tile.coord=coord.copy();
    layer.zoomLevels[coord.zoom].appendChild(tile);
    return tile
    },
drawLayer:function(layerIndex,startCoord,endCoord,timestamp,validTileKeys){
    var layer=this.layers[layerIndex];
    var curZoom=startCoord.zoom;
    var curZoomLevel=this.createOrGetZoomLevel(layer,curZoom);
    var img;
    var scale;
    var tile;
    if(layer.isVector){
        layer.provider.draw(this,curZoomLevel)
        }else{
        var tileCoord=startCoord.copy();
        for(tileCoord.column=startCoord.column;tileCoord.column<=endCoord.column;tileCoord.column+=1){
            for(tileCoord.row=startCoord.row;tileCoord.row<=endCoord.row;tileCoord.row+=1){
                var tileKey=this.encodeTileKey(layerIndex,tileCoord);
                validTileKeys[tileKey]=true;
                if(layer.tiles.hasOwnProperty(tileKey)){
                    tile=layer.tiles[tileKey];
                    if(tile.parentNode!==curZoomLevel){
                        curZoomLevel.appendChild(tile)
                        }
                    }else{
                tile=layer.tiles[tileKey]=this.newTileDiv(layer,tileKey,tileCoord);
                layer.tileCacheSize++;
                var maxStepsOut=tileCoord.zoom;
                var parentFound=false;
                var pz;
                for(pz=1;pz<=maxStepsOut;pz++){
                    var parentCoord=tileCoord.zoomBy(-pz).container();
                    var parentKey=this.encodeTileKey(layerIndex,parentCoord);
                    if(this.enablePyramidLoading){
                        alert("not yet implemented")
                        }else{
                        if(layer.tiles.hasOwnProperty(parentKey)){
                            var parentTile=layer.tiles[parentKey];
                            if(!this.debug){
                                if(parentTile.src){
                                    img=document.createElement("img");
                                    img.style.position="absolute";
                                    img.src=parentTile.src;
                                    scale=Math.pow(2,pz);
                                    img.style.width=Math.round(scale*100)+"%";
                                    img.style.height=Math.round(scale*100)+"%";
                                    var tempCoord=parentCoord.zoomBy(pz);
                                    var tx=-(tileCoord.column-tempCoord.column)*100;
                                    var ty=-(tileCoord.row-tempCoord.row)*100;
                                    img.style.left=Math.round(tx)+"%";
                                    img.style.top=Math.round(ty)+"%";
                                    img.className="parent";
                                    tile.appendChild(img);
                                    parentFound=true;
                                    break
                                }
                            }
                        }
                }
            }
            if(!parentFound){
            var childCoord=tileCoord.zoomBy(1);
            var cx=childCoord.column;
            var cy=childCoord.row;
            var dx=0;
            var dy=1;
            var i;
            for(i=0;i<4;i++){
                switch(i){
                    case 0:
                        dx=0;
                        dy=0;
                        break;
                    case 1:
                        dx=1;
                        dy=0;
                        childCoord.column+=1;
                        break;
                    case 2:
                        dx=0;
                        dy=1;
                        break;
                    case 3:
                        dx=1;
                        dy=1;
                        break
                        }
                        childCoord.column=cx+dx;
                childCoord.row=cy+dy;
                var childKey=this.encodeTileKey(layerIndex,childCoord);
                if(layer.tiles.hasOwnProperty(childKey)){
                    var childTile=layer.tiles[childKey];
                    if(!this.debug){
                        if(childTile.src){
                            img=document.createElement("img");
                            img.style.position="absolute";
                            img.src=childTile.src;
                            img.style.width="50%";
                            img.style.height="50%";
                            img.id=dx+","+dy;
                            img.style.left=Math.round(dx*50)+"%";
                            img.style.top=Math.round(dy*50)+"%";
                            img.className="child";
                            tile.appendChild(img)
                            }
                        }
                }
            }
    }
}
if(!tile.loaded){
    if(!this.requestManager.hasRequest(tileKey)){
        var tileURL=layer.provider.getTileUrl(tileCoord);
        this.requestManager.requestTile(tileKey,tileCoord,tileURL)
        }
    }
if(layer.recentTilesById[tileKey]){
    layer.recentTilesById[tileKey].lastTouchedTime=timestamp
    }else{
    var record={
        id:tileKey,
        lastTouchedTime:timestamp
    };
    
    layer.recentTilesById[tileKey]=record;
    layer.recentTiles.push(record)
    }
}
}
}
curZoomLevel.style.display="block";
var zoom;
for(zoom in layer.zoomLevels){
    if(layer.zoomLevels.hasOwnProperty(zoom)){
        zoom=parseInt(zoom);
        if(zoom!==curZoom){
            var zoomLevel=layer.zoomLevels[zoom];
            zoomLevel.style.display="none";
            if(!layer.isVector){
                var n=zoomLevel.childNodes.length;
                while(n>0){
                    n--;
                    zoomLevel.removeChild(zoomLevel.childNodes[n])
                    }
                }
        }
}
}
if(!layer.isVector){
    scale=Math.pow(2,this.coordinate.zoom-curZoom);
    var theCoord=this.coordinate.copy().zoomTo(curZoom);
    var visibleTiles=curZoomLevel.childNodes;
    var j;
    for(j=visibleTiles.length-1;j>=0;j--){
        tile=visibleTiles[j];
        if(!validTileKeys[tile.id]){
            curZoomLevel.removeChild(tile)
            }else{
            tile.style.display="block";
            this.positionTile(layer,tile,scale,theCoord)
            }
        }
    }
},
positionLayer:function(layer){},
positionTile:function(layer,tile,scale,centerCoord){
    var tileWidth=this.tileDimensions.x*scale;
    var tileHeight=this.tileDimensions.y*scale;
    var center=new MM.Point(this.dimensions.x/2,this.dimensions.y/2);
    var tx=center.x+(tile.coord.column-centerCoord.column)*tileWidth;
    var ty=center.y+(tile.coord.row-centerCoord.row)*tileHeight;
    if(this.debug){
        var ax=(tx-Math.floor(tx));
        var ay=(ty-Math.floor(ty));
        var aw=(tileWidth-Math.floor(tileWidth));
        var ah=(tileHeight-Math.floor(tileHeight));
        var axw=ax+aw;
        var ayh=ay+ah;
        tile.innerHTML="<pre><br/> x: "+ax.toFixed(2)+"<br/> w: "+aw.toFixed(2)+"<br/>xw: "+axw.toFixed(2)+"<br/><br/> y: "+ay.toFixed(2)+"<br/> h: "+ah.toFixed(2)+"<br/>yh: "+ayh.toFixed(2)+"<br/></pre>"
        }
        var tx2=tx+tileWidth;
    var ty2=ty+tileWidth;
    tx=Math.round(tx);
    ty=Math.round(ty);
    tx2=Math.round(tx2);
    ty2=Math.round(ty2);
    tile.style.left=tx+"px";
    tile.style.top=ty+"px";
    tile.style.width=(tx2-tx)+"px";
    tile.style.height=(ty2-ty)+"px";
    if(tile.childNodes){
        var childWidth=(Math.ceil(tileWidth/2));
        var childHeight=(Math.ceil(tileHeight/2));
        var i;
        for(i=0;i<tile.childNodes.length;i++){
            var childTile=tile.childNodes[i];
            if(childTile.className==="child"){
                childTile.style.width=childWidth+"px";
                childTile.style.height=childHeight+"px"
                }
            }
        }
},
_tileComplete:null,
getTileComplete:function(){
    if(!this._tileComplete){
        var theMap=this;
        this._tileComplete=function(manager,tempTile){
            var key=tempTile.key;
            var keyComponents=theMap.decodeTileKey(key);
            var layer=theMap.layers[keyComponents.layerIndex];
            var oldTile=layer.tiles[key];
            var tile;
            if(theMap.debug){
                tile=oldTile;
                tile.style.backgroundColor="rgba(128, 128, 255,0.5)"
                }else{
                if(key!==oldTile.id){}
                tile=theMap.newTileImg(layer,key,oldTile.coord);
                layer.tiles[key]=tile;
                if(tempTile.src===""||!tempTile.src){
                    MM.console.log("really? no src?")
                    }
                    tile.src=tempTile.src;
                tile.loaded=true;
                layer.zoomLevels[oldTile.coord.zoom].removeChild(oldTile);
                if(Math.round(theMap.coordinate.zoom)===keyComponents.zoom){
                    tile.style.display="block"
                    }else{
                    layer.zoomLevels[tile.coord.zoom].removeChild(tile)
                    }
                }
            var theCoord=theMap.coordinate.zoomTo(tile.coord.zoom);
        var scale=Math.pow(2,theMap.coordinate.zoom-tile.coord.zoom);
        theMap.positionTile(layer,tile,scale,theCoord)
        }
    }
return this._tileComplete
},
_redrawTimer:undefined,
requestRedraw:function(){
    if(!this._redrawTimer){
        this._redrawTimer=setTimeout(this.getRedraw(),this.maxRedrawDelay)
        }
    },
_redraw:null,
getRedraw:function(){
    if(!this._redraw){
        var theMap=this;
        this._redraw=function(){
            theMap.draw();
            theMap._redrawTimer=0
            }
        }
    return this._redraw
},
createOrGetZoomLevel:function(layer,zoom){
    if(layer.zoomLevels.hasOwnProperty(zoom)){
        return layer.zoomLevels[zoom]
        }
        var zoomLevel=document.createElement("div");
    zoomLevel.id=layer.zoomLevelsParent.id+"-zoom-"+zoom;
    zoomLevel.style.cssText=layer.zoomLevelsParent.style.cssText;
    zoomLevel.style.zIndex=layer.zoomLevelsParent.style.zIndex+zoom;
    layer.zoomLevelsParent.appendChild(zoomLevel);
    layer.zoomLevels[zoom]=zoomLevel;
    return zoomLevel
    },
_checkCache:null,
_checkCacheTimer:null,
checkCache:function(){
    if(this._checkCacheTimer){
        clearTimeout(this._checkCacheTimer)
        }
        this._checkCacheTimer=setTimeout(this.getCheckCache(),this.minCheckCacheDelay)
    },
getCheckCache:function(){
    if(!this._checkCache){
        var theMap=this;
        this._checkCache=function(){
            MM.console.debug("checking cache");
            this._checkCacheTimer=null;
            var numTilesOnScreen=theMap.parent.childNodes.length;
            var tileSort=function(t1,t2){
                return t2.lastTouchedTime<t1.lastTouchedTime?-1:t2.lastTouchedTime>t1.lastTouchedTime?1:0
                };
                
            var layerIndex;
            for(layerIndex=0;layerIndex<theMap.layers.length;layerIndex++){
                var layer=theMap.layers[layerIndex];
                if(!layer.isVector){
                    var maxTiles=Math.max(numTilesOnScreen,layer.maxTileCacheSize);
                    MM.console.log(layer.tileCacheSize+" --- "+maxTiles+" ( "+layer.recentTiles.length+" )");
                    if(layer.tileCacheSize>maxTiles){
                        layer.recentTiles.sort(tileSort)
                        }while(layer.tileCacheSize>maxTiles){
                        var tileRecord=layer.recentTiles.pop();
                        delete layer.recentTilesById[tileRecord.id];
                        var tile=layer.tiles[tileRecord.id];
                        if(tile.parentNode){
                            alert("Gah: trying to removing cached tile even though it's still in the DOM")
                            }else{
                            delete layer.tiles[tileRecord.id];
                            layer.tileCacheSize--
                        }
                    }
                }
            }
    }
}
return this._checkCache
},
getCenterDistanceCompare:function(){
    var theCoord=this.coordinate.zoomTo(Math.round(this.coordinate.zoom));
    return function(r1,r2){
        if(r1&&r2){
            var c1=r1.coord;
            var c2=r2.coord;
            if(c1.zoom===c2.zoom){
                var ds1=Math.abs(theCoord.row-c1.row-0.5)+Math.abs(theCoord.column-c1.column-0.5);
                var ds2=Math.abs(theCoord.row-c2.row-0.5)+Math.abs(theCoord.column-c2.column-0.5);
                return ds1<ds2?1:ds1>ds2?-1:0
                }else{
                return c1.zoom<c2.zoom?1:c1.zoom>c2.zoom?-1:0
                }
            }
        return r1?1:r2?-1:0
    }
},
locationCoordinate:function(location){
    return this.projection.locationCoordinate(location)
    },
coordinateLocation:function(location){
    return this.projection.coordinateLocation(location)
    },
maxVisibleTiles:function(){
    return(2+Math.ceil(this.dimensions.x/this.tileDimensions.x))*(2+Math.ceil(this.dimensions.y/this.tileDimensions.y))
    },
updateCacheLimits:function(){
    var n=this.getCacheLimit();
    var layerIndex;
    for(layerIndex=0;layerIndex<this.layers.length;layerIndex++){
        this.layers[layerIndex].maxTileCacheSize=n
        }
    },
getCacheLimit:function(){
    return this.maxVisibleTiles()*this.cacheMultiple
    }
}
}());
(function(){
    MF.initialize=function(opts){
        MF.util.namespace("MF.Globals");
        if(typeof window.console!=="undefined"){
            MF.console=window.console
            }else{
            MF.console={
                assert:function(){},
                log:function(){},
                info:function(){},
                warn:function(){},
                error:function(){},
                exception:function(){},
                trace:function(){}
            }
        }
    if(!opts.proxy){
    opts.proxy="none"
    }
    if(opts.proxy==="jsonp"){
    MF.Globals.PROXY=MF.request.proxy.JSONP()
    }else{
    if(opts.proxy==="none"){
        MF.Globals.PROXY=null
        }else{
        MF.Globals.PROXY=MF.request.proxy.Server();
        opts.servers={};
        
        opts.servers.QUERY_SERVER=opts.proxy
        }
    }
MF.Globals.API_KEY=opts.apiKey;
MF.Globals.VERSION=opts.version||"2.0";
MF.Globals.PROTOCOL=opts.protocol||"http://";
MF.Globals.QUERY_SERVER=(opts.servers&&opts.servers.QUERY_SERVER)?opts.servers.QUERY_SERVER:"query.mapfluence.com";
    MF.Globals.TILE_SERVER=(opts.servers&&opts.servers.TILE_SERVER)?opts.servers.TILE_SERVER:"tile.mapfluence.com";
    MF.Globals.BASEMAP_SERVER=(opts.servers&&opts.servers.BASEMAP_SERVER)?opts.servers.BASEMAP_SERVER:"basemap.mapfluence.com";
    MF.Globals.QUERY_SERVER+="/"+MF.Globals.VERSION;
    MF.Globals.TILE_SERVER+="/"+MF.Globals.VERSION+"/"+MF.Globals.API_KEY+"/tile";
    MF.Globals.BASEMAP_SERVER+="/"+MF.Globals.VERSION;
    MF.Globals.CATALOG_ENDPOINT="/catalog";
    MF.Globals.IS_DONT_ENUM_BUGGY=(function(){
    for(var p in {
        toString:1
    }){
        if(p==="toString"){
            return false
            }
        }
    return true
}());
MF.initializeDebug()
}
}());
(function(){
    if(!window.MF){
        window.MF={}
    }
    if(!window.MF.util){
    window.MF.util={}
}
MF.util.round=function(num,places){
    var multiplier=Math.pow(10,places),result=Math.round(num*multiplier)/multiplier;
    return result
    };
    
MF.util.namespace=function(name,container){
    var ns=name.split("."),o=container||window,i,len;
    for(i=0,len=ns.length;i<len;i++){
        o=o[ns[i]]=o[ns[i]]||{}
    }
    return o
};

MF.util.shallowCopy=function(dest,src){
    if(dest&&src){
        for(var p in src){
            dest[p]=src[p]
            }
            if(MF.Globals.IS_DONT_ENUM_BUGGY&&"toString" in src&&src.toString!=Object.prototype.toString){
            dest.toString=src.toString
            }
        }
};

MF.util.range=function(){
    var start,end,step;
    var array=[];
    switch(arguments.length){
        case 0:
            throw new Error("range() expected at least 1 argument, got 0 - must be specified as [start,] stop[, step]");
            return array;
        case 1:
            start=0;
            end=Math.floor(arguments[0])-1;
            step=1;
            break;
        case 2:case 3:default:
            start=Math.floor(arguments[0]);
            end=Math.floor(arguments[1])-1;
            var s=arguments[2];
            if(typeof s==="undefined"){
            s=1
            }
            step=Math.floor(s)||(function(){
            throw new Error("range() step argument must not be zero")
            }());
            break
            }
            if(step>0){
        for(var i=start;i<=end;i+=step){
            array.push(i)
            }
        }else{
    if(step<0){
        step=-step;
        if(start>end){
            for(var i=start;i>end+1;i-=step){
                array.push(i)
                }
            }
        }
}
return array
};

MF.util.typeOf=function(value){
    var s=typeof value;
    if(s==="object"){
        if(value){
            if(typeof value.length==="number"&&!(value.propertyIsEnumerable("length"))&&typeof value.splice==="function"){
                s="array"
                }
            }else{
        s="null"
        }
    }else{
    if(s==="number"){
        if(value%1!==0){
            s="float"
            }else{
            s="int"
            }
        }
}
return s
};

MF.util.asBoolean=function(value){
    if(typeof(value)==="string"){
        switch(value.toLowerCase()){
            case"true":case"yes":case"1":
                return true;
            case"false":case"no":case"0":case null:
                return false;
            default:
                return Boolean(value)
                }
            }
    return Boolean(value)
};

MF.util.asBooleanInt=function(value){
    return MF.util.asBoolean(value)?1:0
    };
    
MF.util.exceptionFromArray=function(errors){
    var errorMessage,errorMessages=[],i=0;
    if(errors.length>0){
        for(i=0;i<errors.length;i+=1){
            errorMessages.push(errors[i].toString())
            }
            errorMessage=errors.join("\n");
        throw errorMessage
        }
    };

MF.util.parseQueryString=function(string){
    var qps=string?string.split("&"):location.search.slice(1).split("&"),params={},param,keydec,valdec,valdecfloat,i=0;
    if(qps.length===1&&qps[0]===""){
        return{}
    }while(i<qps.length){
    param=qps[i++];
    keyval=param.split("=",2);
    keydec=decodeURIComponent(keyval[0]);
    if(keyval.length===1){
        params[keydec]=null
        }else{
        valdec=decodeURIComponent(keyval[1]);
        valdecfloat=parseFloat(valdec);
        params[keydec]=(isNaN(valdecfloat))?valdec:valdecfloat
        }
    }
return params
};

MF.util.encodeQueryString=function(dict){
    var temp=[],item,qs;
    for(item in dict){
        qs=encodeURIComponent(item);
        if(dict[item]!==null){
            qs+="="+encodeURIComponent(dict[item])
            }
            temp.push(qs)
        }
        return temp.join("&")
    };
    
MF.util.getMapOptionsFromQuery=function(key){
    var mOptions=MF.util.parseQueryString(),mOpt=mOptions["Mapfluence."+key];
    if(mOpt){
        return MF.util.parseQueryString(decodeURIComponent(mOpt))
        }else{
        return null
        }
    };

MF.util.encodeMapOptionsForQuery=function(key,mapOptions){
    var qs=MF.util.parseQueryString(),qps={};
    
    qs["Mapfluence."+key]=MF.util.encodeQueryString(mapOptions);
    return MF.util.encodeQueryString(qs)
    };
    
MF.util.createMapManagerFromQuery=function(managerCtor,mapDiv,mapOptions){
    var mOptions=MF.util.getMapOptionsFromQuery(mapDiv.id),tempOptions={};
    
    MF.util.shallowCopy(tempOptions,mapOptions);
    MF.util.shallowCopy(tempOptions,mOptions);
    return managerCtor(mapDiv,tempOptions)
    };
    
MF.util.sliceArray=function(arr,from,to){
    var rest=arr.slice((to||from)+1||arr.length);
    arr.length=from<0?arr.length+from:from;
    return arr.push.apply(arr,rest)
    };
    
MF.util.findClosest=function(target,arr){
    var least=Number.MAX_VALUE,cand,i,x,difference;
    for(i=0;i<arr.length;i+=1){
        x=arr[i];
        difference=Math.abs(x-target);
        if(difference<least){
            least=difference;
            cand=x
            }
        }
    return cand
};

MF.util.buildStaticUrl=function(path){
    if(MF.util.buildStaticUrl.staticHost===undefined){
        MF.util.buildStaticUrl.staticHost=MF.Globals.PROTOCOL+"static.mapfluence.com/mapfluence/"+MF.Globals.MFJS_VERSION+"/";
        if(MF.Globals.LOCAL){
            var root=MF.jsRoot("mfjs.min.js")||MF.jsRoot("mfjs.js");
            var STATIC_LOCATION="static.mapfluence.com";
            var root_match=root.match(new RegExp("https?://"+STATIC_LOCATION));
            if(!root_match){
                MF.util.buildStaticUrl.staticHost="/mfjs/"
                }
            }
    }
return MF.util.buildStaticUrl.staticHost+path
}
}());
(function(){
    MF.util.namespace("MF.request");
    MF.request.Request=function(secret){
        var secret=secret||{},that={};
        
        secret.queryParametersName="param";
        secret.pathParametersName="pathParam";
        that.properties=MF.property.Properties();
        that.add=function(name){
            var addP=function(key,parameter){
                that.properties.addProperty(name,key,parameter)
                };
                
            that["add"+name.charAt(0).toUpperCase()+name.substr(1)]=addP
            };
            
        that.add(secret.queryParametersName);
        that.add(secret.pathParametersName);
        that.get=function(key){
            return that.properties.get(key)
            };
            
        that.getProperty=function(key){
            return that.properties.getProperty(key)
            };
            
        var setParams=function(opts){
            var key,parameter,errors=[],errorMessage="";
            if(opts!==undefined){
                for(key in opts){
                    try{
                        that.set(key,opts[key])
                        }catch(error){
                        errors.push(error.toString())
                        }
                    }
                MF.util.exceptionFromArray(errors)
            }
        };
    
that.set=function(){
    if(arguments.length===1){
        setParams(arguments[0])
        }else{
        if(arguments.length===2){
            that.properties.setProperty(arguments[0],arguments[1])
            }else{
            throw"The 'set' function takes one or two arguments; "+arguments.length+" were given."
            }
        }
};

that.initialize=function(opts){
    setParams(opts);
    return that
    };
    
that.toUrlString=function(){
    var compound=that.properties.getProperties(secret.queryParametersName),urlString=compound.toUrlString();
    urlString.replace("&","|");
    return urlString
    };
    
return that
}
}());
(function(){
    MF.util.namespace("MF.request");
    MF.request.GetRequest=function(secret){
        var secret=secret||{},that=MF.request.Request(secret);
        that.addParam("jsonp",MF.property.String());
        that.addPathParam("format",MF.property.String("json"));
        that.toString=function(){
            return that.toUrlString()
            };
            
        that.url=function(){
            return that.toUrlString()
            };
            
        that.toUrlString=function(){
            var compoundQuery=that.properties.getProperties(secret.queryParametersName),server=MF.Globals.QUERY_SERVER,format=that.getProperty("format"),endpoint=that.getProperty("endpoint"),apikey="",queryString=compoundQuery.toUrlString(),urlString;
            if(MF.Globals.API_KEY){
                apikey="/"+encodeURIComponent(MF.Globals.API_KEY)
                }
                urlString=MF.Globals.PROTOCOL+server+apikey+endpoint+"."+format+"?"+queryString;
            return urlString
            };
            
        that.execute=function(callback,errorCallback){
            if(!callback){
                throw"No callback supplied in MF.layer.tile.Base.getLegend()."
                }
                var url=that.url();
            MF.console.info("MF.request.GetRequest.execute: "+url);
            if(url){
                MF.request.proxy.executeRemoteCall(url,callback,errorCallback)
                }else{
                window.setTimeout("callback(null)",1)
                }
            };
        
    return that
    }
}());
(function(){
    MF.util.namespace("MF.request.proxy");
    MF.request.proxy.Base=function(){
        var that={};
        
        that.send=function(url,successCallback,errorCallback){
            throw"Derived class must override the send() method of abstract class MF.request.proxy.Base."
            };
            
        return that
        };
        
    MF.request.proxy.executeRemoteCall=function(url,callback,errorCallback){
        MF.console.info("MF.request.proxy.executeRemoteCall: "+url);
        MF.Globals.PROXY.send(url,callback,function(errorStatus,data){
            MF.console.log("Error ("+errorStatus+") with remote request to : "+url);
            MF.console.log(data);
            if(errorCallback){
                errorCallback(url,errorStatus,data)
                }
            })
    }
}());
(function(){
    MF.util.namespace("MF.request.proxy");
    MF.request.proxy.JSONP=function(opts){
        if(jQuery===undefined){
            throw"MF.request.proxy.JSONP requires jQuery."
            }
            if(jQuery.jsonp===undefined){
            throw"MF.request.proxy.JSONP requires jquery-jsonp."
            }
            var that=MF.request.proxy.Base();
        that.jsonpOptions={
            callbackParameter:"jsonp"
        };
        
        that.send=function(url,successCallback,errorCallback){
            jQuery.jsonp({
                url:url,
                callbackParameter:"jsonp",
                error:function(xOptions,textStatus){
                    errorCallback(textStatus,xOptions)
                    },
                success:function(json,textStatus){
                    successCallback(json)
                    }
                })
        };
        
    return that
    }
}());
(function(){
    MF.util.namespace("MF.request.proxy");
    MF.request.proxy.Server=function(opts){
        var that=MF.request.proxy.Base();
        that.send=function(url,successCallback,errorCallback){
            var xmlhttp=new XMLHttpRequest();
            xmlhttp.onreadystatechange=function(){
                if(xmlhttp.readyState===4){
                    var response=xmlhttp.responseText;
                    try{
                        response=JSON.parse(response)
                        }catch(e){}
                    if(Math.floor(xmlhttp.status/200)===1){
                        successCallback(response)
                        }else{
                        errorCallback(response)
                        }
                    }
            };
        
    xmlhttp.open("GET",url,true);
    xmlhttp.send(null)
    };
    
return that
}
}());
(function(){
    MF.util.namespace("MF.expr");
    MF.expr.OperatorMulti=function(value,secret){
        var that=MF.property.Array(MF.property.Base);
        that.operator=undefined;
        that.toString=function(){
            var str=that.operator+"("+that.get()+")";
            return str
            };
            
        that.toUrlString=that.toString;
        return that.initialize(value)
        };
        
    MF.expr.OperatorUnary=function(value){
        var that=MF.property.Base();
        that.operator=undefined;
        that.toString=function(){
            var str=that.operator+"("+that.get()+")";
            return str
            };
            
        return that.initialize(value)
        };
        
    MF.expr.OperatorBinary=function(value){
        var that=MF.property.Array(MF.property.Base),super_validate=that.validate;
        that.validate=function(arg){
            super_validate.apply(that,[arg]);
            if(arg.length!==2){
                throw"MF.expr.OperatorBinary requires 2 values, "+arg.length+" given."
                }
            };
        
    return that.initialize(value)
    };
    
MF.expr.Sum=function(value){
    var that=MF.expr.OperatorUnary();
    that.operator="SUM";
    return that.initialize(value)
    };
    
MF.expr.Avg=function(value){
    var that=MF.expr.OperatorUnary();
    that.operator="AVG";
    return that.initialize(value)
    };
    
MF.expr.StdDev=function(value){
    var that=MF.expr.OperatorUnary();
    that.operator="STDDEV";
    return that.initialize(value)
    };
    
MF.expr.Count=function(value){
    var that=MF.expr.OperatorUnary();
    that.operator="COUNT";
    return that.initialize("*")
    };
    
MF.expr.Add=function(value){
    var that=MF.expr.OperatorMulti();
    that.operator="ADD";
    return that.initialize(value)
    };
    
MF.expr.Mul=function(value){
    var that=MF.expr.OperatorMulti();
    that.operator="MUL";
    return that.initialize(value)
    };
    
MF.expr.Sub=function(value){
    var that=MF.expr.OperatorBinary();
    that.toString=function(){
        var str="SUB("+that.get()+")";
        return str
        };
        
    return that.initialize(value)
    };
    
MF.expr.Div=function(value){
    var that=MF.expr.OperatorBinary();
    that.toString=function(){
        var str="DIV("+that.get()+")";
        return str
        };
        
    return that.initialize(value)
    }
}());
(function(){
    MF.util.namespace("MF.catalog");
    MF.catalog.Dataset=function(ds){
        var that=MF.catalog.CatalogObject(),super_initialize=that.initialize||function(){
            return that
            };
            
        that.type="dataset";
        that.initialize=function(){
            super_initialize.apply(that,[]);
            if(typeof ds==="object"){
                ds=""+ds
                }
                that.dataset=ds;
            return that
            };
            
        that.toString=function(){
            return that.dataset
            };
            
        return that.initialize()
        }
    }());
(function(){
    MF.util.namespace("MF.catalog");
    MF.catalog.MetadataQuery=function(object,secret){
        var secret=secret||{},that=MF.request.GetRequest(secret);
        if(!object.type){
            throw"MetadataQuery must be initialized with a catalog object argument"
            }
            that.toUrlString=function(){
            var qParams=that.properties.getProperties(secret.queryParametersName).toUrlString(),url,apikey="";
            if(MF.Globals.API_KEY){
                apikey="/"+encodeURIComponent(MF.Globals.API_KEY)
                }
                url=MF.Globals.PROTOCOL+MF.Globals.QUERY_SERVER+apikey+MF.Globals.CATALOG_ENDPOINT+"/"+object.type+"/"+object.toString();
            if(qParams){
                url+="?"+qParams
                }
                return url
            };
            
        return that.initialize(undefined)
        };
        
    MF.catalog.splitCodename=function(){
        var args=arguments,parts,components;
        if((args.length!==1)||(typeof args[0]!=="string")){
            throw"splitComponents only takes one argument of type string."
            }
            parts=args[0].split(".");
        partsLength=parts.length;
        if(partsLength<2){
            throw"Invalid codename "+args[0]
            }
            components={
            dataset:parts[0]+"."+parts[1],
            table:(partsLength>2)?parts[2]:undefined,
            column:(partsLength>3)?parts[3]:undefined
            };
            
        return components
        }
    }());
(function(){
    MF.util.namespace("MF.catalog");
    MF.catalog.Table=function(){
        var that=MF.catalog.CatalogObject(),args=arguments,super_initialize=that.initialize||function(){
            return that
            };
            
        that.type=undefined;
        that.initialize=function(){
            super_initialize.apply(that,[]);
            if(args.length===1){
                if(args[0].type=="catalogColumn"){
                    that.table=args[0].table;
                    that.column=args[0].column
                    }else{
                    if(typeof(args[0])==="string"){
                        var components=MF.catalog.splitCodename(args[0]);
                        if(components.length>2){
                            throw"Table may only be constructed from a codename of the form dataset.table"
                            }
                            that.dataset=MF.catalog.Dataset(components.dataset);
                        that.table=components.table
                        }
                    }
            }else{
        if(args[0].type!=="dataset"&&typeof(args[0])!=="string"){
            throw"MF.catalog.Table: two arguments given, first argument must be either a MF.catalog.Dataset or a string"
            }
            that.dataset=args[0];
        if(typeof(args[1])!=="string"){
            throw"MF.catalog.Table: two arguments given, second argument must be a string"
            }
            that.table=args[1]
        }
        return that
    };
    
that.toString=function(){
    var s=""+that.dataset+"."+that.table;
    return s
    };
    
return that.initialize()
    };
    
MF.catalog.AttributeTable=function(){
    var that=MF.catalog.Table.apply(this,arguments);
    that.type="attributeTable";
    return that
    };
    
MF.catalog.GeometryTable=function(){
    var that=MF.catalog.Table.apply(this,arguments);
    that.type="geometryTable";
    return that
    }
}());
(function(){
    MF.util.namespace("MF.catalog");
    MF.catalog.CatalogObject=function(){
        var that={};
        
        that.fetchMetadata=function(callback,errorCallback){
            var mq=MF.catalog.MetadataQuery(that);
            if(that.metadata){
                callback(that.metadata)
                }else{
                mq.execute(function(response){
                    that.metadata=response;
                    callback(that.metadata)
                    },errorCallback)
                }
            };
        
    return that
    }
}());
(function(){
    MF.util.namespace("MF.catalog");
    MF.catalog.Column=function(){
        var that=MF.catalog.CatalogObject(),super_initialize=that.initialize||function(){
            return that
            },args=arguments;
        that.type="attributeColumn";
        that.initialize=function(){
            super_initialize.apply(that,[]);
            if(args.length===1){
                if(args[0].type=="catalogColumn"){
                    var col=args[0];
                    that.table=col.table;
                    that.column=col.column
                    }else{
                    if(typeof(args[0])==="string"){
                        var codename=args[0],components=MF.catalog.splitCodename(codename),ds=MF.catalog.Dataset(components.dataset);
                        that.table=MF.catalog.AttributeTable(ds,components.table);
                        that.column=components.column
                        }else{
                        throw"MF.catalog.Column: one argument given, must be either a MF.catalog.Column or a string"
                        }
                    }
            }else{
        if(args[0].type!=="attributeTable"&&typeof(args[0])!=="string"){
            throw"MF.catalog.Column: two arguments given, first argument must be either a MF.catalog.AttributeTable or a string"
            }
            that.table=args[0];
        if(typeof(args[1])!=="string"){
            throw"MF.catalog.Column: two arguments given, second argument must be a string"
            }
            that.column=args[1]
        }
        return that
    };
    
that.toString=function(){
    return that.table+"."+that.column
    };
    
return that.initialize()
    }
}());
(function(){
    MF.util.namespace("MF.statistics");
    MF.statistics.Statistics=function(){
        return{
            select:undefined,
            where:undefined,
            from:undefined,
            date:undefined,
            min:undefined,
            max:undefined,
            stddev:undefined,
            avg:undefined,
            sum:undefined,
            count:undefined,
            getUniformBreaks:function(options){
                var breakSize,breaks=[],i=1;
                if(options.breaks===undefined){
                    throw"getUniformBreaks requires the 'breaks' parameter."
                    }
                    breakSize=(this.max-this.min)/options.breaks;
                while(i<options.breaks){
                    breaks.push(this.min+(breakSize*i++))
                    }
                    for(i=0;i<breaks.length;i+=1){
                    breaks[i]=MF.util.round(breaks[i],options.places||2)
                    }
                    return breaks
                },
            getStdDevBreaks:function(options){
                var breaks=[],side,breakSize,i;
                if(options.breaks===undefined){
                    throw"getStdDevBreaks requires the 'breaks' parameter."
                    }
                    if(options.width===undefined){
                    throw"getStdDevBreaks requires the 'width' parameter."
                    }
                    breakSize=(options.width/options.breaks)*this.stddev;
                side=options.breaks/2;
                i=-side+1;
                while(i<side){
                    breaks.push(i++*breakSize+this.avg)
                    }
                    for(i=0;i<breaks.length;i+=1){
                    breaks[i]=MF.util.round(breaks[i],options.places||2)
                    }
                    return breaks
                },
            getLogarithmicBreaks:function(options){
                var breaks=[],i=1,min=this.min,max=this.max,scale,breakSize;
                if(options.breaks===undefined){
                    throw"getLogarithmicBreaks requires the 'breaks' parameter."
                    }
                    if(this.min<1){
                    min=1;
                    max=(1-this.min)+this.max
                    }
                    scale=options.scale||max;
                breakSize=Math.log(scale)/(Math.log(options.base||10)*options.breaks);
                while(i<options.breaks){
                    var pushee=i++*breakSize;
                    pushee=Math.pow(options.base||10,pushee);
                    pushee=((pushee-1)*(this.max/(scale-min)))+this.min;
                    if(options.reverse){
                        pushee=this.max-pushee
                        }
                        breaks.push(pushee)
                    }
                    if(options.reverse){
                    breaks.reverse()
                    }
                    for(i=0;i<breaks.length;i+=1){
                    breaks[i]=MF.util.round(breaks[i],options.places||2)
                    }
                    return breaks
                }
            }
    };

MF.statistics.getStatistics=function(options,callback,errorCallback){
    var sqOpts={};
    
    if(!options.select){
        throw"No select statement provided in options parameter in MF.statistics.getStatistics()"
        }
        sqOpts.select={
        min:"MIN("+options.select+")",
        max:"MAX("+options.select+")",
        stddev:"STDDEV("+options.select+")",
        avg:"AVG("+options.select+")",
        count:"COUNT("+options.select+")",
        sum:"SUM("+options.select+")"
        };
        
    if(options.where){
        sqOpts.where=options.where
        }
        if(options.from){
        sqOpts.from=options.from
        }
        if(options.date){
        sqOpts.date=options.date
        }
        var sq=MF.query.Spatial(sqOpts);
    var cb2=function(mms){
        var stat=MF.statistics.Statistics();
        stat.min=parseFloat(mms.min);
        stat.max=parseFloat(mms.max);
        stat.stddev=parseFloat(mms.stddev);
        stat.avg=parseFloat(mms.avg);
        stat.count=parseFloat(mms.count);
        stat.sum=parseFloat(mms.sum);
        stat.select=options.select;
        if(options.where){
            stat.where=options.where
            }
            if(options.date){
            stat.date=options.date
            }
            stat.from=options.from;
        if(stat.count===0){
            MF.console.log("No results found in statistics query");
            MF.console.info(stat)
            }
            callback(stat)
        };
        
    sq.execute(cb2,errorCallback)
    }
}());
(function(){
    MF.util.namespace("MF.query");
    MF.query.Spatial=function(opts){
        var that=MF.request.GetRequest();
        that.addPathParam("endpoint",MF.property.String("/spatialquery"));
        that.addParam("select",MF.property.Select());
        that.addParam("where",MF.property.Where());
        that.addParam("order_by",MF.property.OrderBy());
        that.addParam("from",MF.property.GeometryTable());
        that.addParam("date",MF.property.Date());
        that.addParam("limit",MF.property.Limit());
        return that.initialize(opts)
        }
    }());
(function(){
    MF.util.namespace("MF.query");
    MF.query.SpatialOperation=function(opts,secret){
        var secret=secret||{},that=MF.request.GetRequest(secret);
        that.addPathParam("endpoint",MF.property.String("/spatialops"));
        that.addParam("select",MF.property.Array(MF.property.Geometry()));
        that.addParam("using",MF.property.Enumeration(["intersection","union","extent"],"intersection"));
        return that.initialize(opts)
        }
    }());
(function(){
    MF.util.namespace("MF.query");
    MF.query.Estimate=function(opts){
        var that=MF.request.GetRequest();
        that.addPathParam("endpoint",MF.property.String("/estimate"));
        that.addParam("select",MF.property.Select());
        that.addParam("date",MF.property.Date());
        that.addParam("in",MF.property.Geometry());
        that.addParam("using",MF.property.GeometryTable());
        return that.initialize(opts)
        }
    }());
(function(){
    MF.util.namespace("MF.query");
    MF.query.Feature=function(opts,secret){
        var secret=secret||{},that=MF.request.GetRequest(secret);
        that.addPathParam("endpoint",MF.property.String("/catalog/featureRecord"));
        that.addPathParam("feature",MF.property.FeatureId());
        that.toUrlString=function(){
            var fid,compoundQuery,server,format,endpoint,queryString;
            compoundQuery=that.properties.getProperties(secret.queryParametersName);
            server=MF.Globals.QUERY_SERVER;
            endpoint=that.getProperty("endpoint");
            fid=that.getProperty("feature");
            queryString=compoundQuery.toUrlString();
            return MF.Globals.PROTOCOL+server+"/"+MF.Globals.API_KEY+endpoint+"/"+fid.toUrlString()+"?"+queryString
            };
            
        return that.initialize(opts)
        }
    }());
(function(){
    MF.util.namespace("MF.query");
    MF.query.Geocode=function(opts,secret){
        var secret=secret||{},that=MF.request.GetRequest(secret);
        that.addPathParam("endpoint",MF.property.String("/geocoder"));
        that.addParam("address",MF.property.String());
        that.addParam("street",MF.property.String());
        that.addParam("state",MF.property.String());
        that.addParam("city",MF.property.String());
        that.addParam("postalcode",MF.property.String());
        return that.initialize(opts)
        }
    }());
(function(){
    MF.util.namespace("MF.filter");
    MF.filter.And=function(value){
        var that=MF.property.Array(MF.property.Base);
        that.toString=function(){
            var str="AND("+that.get()+")";
            return str
            };
            
        that.toUrlString=that.toString;
        return that.initialize(value)
        };
        
    MF.filter.Or=function(value){
        var that=MF.property.Array(MF.property.Base);
        that.toString=function(){
            var str="OR("+that.get()+")";
            return str
            };
            
        that.toUrlString=that.toString;
        return that.initialize(value)
        };
        
    MF.filter.Not=function(value){
        var that=MF.property.Base();
        that.toString=function(){
            var str="NOT("+that.get()+")";
            return str
            };
            
        that.toUrlString=that.toString;
        return that.initialize(value)
        }
    }());
(function(){
    MF.util.namespace("MF.filter");
    MF.filter.Geometry=function(opts,secret){
        var secret=secret||{},that=MF.property.Composed(secret);
        secret.properties.geometry=MF.property.Geometry();
        secret.properties.operator=MF.property.Enumeration(["intersects","within","contains"]);
        that.toString=function(){
            var op=MF.filter.Geometry.Comparators[that.get("operator")];
            if(!op){
                MF.util.log.fatal("No operator specified for MF.filter.Geometry")
                }
                if(!that.get("geometry")){
                MF.util.log.fatal("No geometry specified for MF.filter.Geometry")
                }
                return op+"("+that.getProperty("geometry").toUrlString()+")"
            };
            
        that.toUrlString=that.toString;
        return that.initialize(opts)
        };
        
    MF.filter.Geometry.Comparators={
        intersects:"intersects",
        within:"within",
        contains:"contains"
    }
}());
(function(){
    MF.util.namespace("MF.filter");
    MF.filter.Value=function(value,secret){
        var secret=secret||{},that=MF.property.Flex(secret);
        that.validate=function(arg){
            switch(typeof arg){
                case"string":
                    secret.composedProperty=MF.property.String();
                    secret.composedProperty.toUrlString=function(){
                    var url=""+secret.composedProperty.get();
                    if(url.length>0&&url[0]!=="'"){
                        url="'"+url+"'"
                        }
                        return url
                    };
                    
                break;
                case"number":
                    secret.composedProperty=MF.property.Number();
                    break;
                case"object":
                    secret.composedProperty=MF.property.Date();
                    break;
                default:
                    throw"Geometry must be a string, number or object, not "+typeof arg
                    }
                    secret.composedProperty.validate(arg)
            };
            
        return that.initialize(value)
        };
        
    MF.filter.Data=function(opts,secret){
        var secret=secret||{},that=MF.property.Composed(secret),x;
        secret.properties.column=MF.property.String();
        secret.properties.operator=MF.property.Enumeration(MF.filter.Data.Comparators);
        secret.properties.value=MF.filter.Value();
        that.toString=function(){
            var op=MF.filter.Data.Comparators[that.get("operator")],value=that.propertyUrlString("value");
            if(op===undefined){
                throw"Operator must not be null"
                }
                if(op==="nnull"||op==="isnull"){
                value=value?"t":"f"
                }else{
                if(op==="exact"){
                    op=""
                    }else{
                    op="__"+op
                    }
                }
            str=that.get("column")+op+":"+value;
        return str
        };
        
    that.toUrlString=that.toString;
    return that.initialize(opts)
    };
    
MF.filter.Data.Comparators={
    "=":"exact",
    "!=":"nexact",
    ">":"gt",
    ">=":"gte",
    "<":"lt",
    "<=":"lte",
    "in":"in",
    equals:"exact",
    contains:"contains",
    exact:"exact",
    iexact:"iexact",
    startswith:"startswith",
    istartswith:"istartswith",
    endswith:"endswith",
    iendswith:"iendswith",
    isnull:"isnull",
    nin:"nin",
    ncontains:"ncontains",
    nexact:"nexact",
    niexact:"niexact",
    nstartswith:"nstartswith",
    nistartswith:"nistartswith",
    nendswith:"nendswith",
    niendswith:"niendswith",
    nnull:"nnull",
    notnull:"nnull"
}
}());
(function(){
    MF.util.namespace("MF.layer.tile");
    MF.layer.tile.Heat=function(options){
        var that=MF.layer.tile.FeatureBase({
            mode:"heatmap"
        },{
            hasLegend:false
        });
        that.tileType="heatmap";
        that.addParam("select",MF.property.String());
        that.addParam("colors",MF.property.Array(MF.property.Color));
        that.addParam("density_scale",MF.property.PositiveNumber());
        return that.initialize(options)
        }
    }());
(function(){
    MF.util.namespace("MF.layer.tile");
    MF.layer.tile.Base=function(opts,secret){
        var secret=secret||{},that=MF.request.Request(secret);
        that.layerType="tile";
        that.visible=true;
        that.addParam("opacity",MF.property.Opacity());
        that.addParam("min_zoom",MF.property.Integer());
        that.addParam("max_zoom",MF.property.Integer());
        that.addParam("mode",MF.property.String());
        that.getLayerUrlString=function(modifiers){
            if(!this.visible){
                return""
                }
                var compound,urlString,layerSpec,layermin=that.get("min_zoom"),layermax=that.get("max_zoom"),zoomLevel,newModifiers,newOpacity;
            if(modifiers&&modifiers.zoomLevel!==undefined){
                zoomLevel=modifiers.zoomLevel;
                if(!that.isInZoomRange(zoomLevel)){
                    return""
                    }
                }
            if(!modifiers||modifiers.opacity===undefined){
            compound=that.properties.getProperties(secret.queryParametersName);
            urlString=compound.toUrlString()
            }else{
            newOpacity=secret.blendOpacity(modifiers.opacity);
            urlString=that.toUrlString();
            urlString=urlString.replace(/opacity=[\d.]*/,"opacity="+newOpacity)
            }
            return urlString.replace(/&/g,"|")
        };
        
    that.isInZoomRange=function(zoomLevel){
        var layermin=that.get("min_zoom"),layermax=that.get("max_zoom");
        if(zoomLevel!==undefined){
            layermin=(layermin!==undefined)?layermin:0;
            layermax=(layermax!==undefined)?layermax:19;
            if(layermin>zoomLevel||layermax<zoomLevel){
                return false
                }
            }
        return true
    };
    
secret.blendOpacity=function(opacity){
    var myOpacity=that.properties.get("opacity");
    if(opacity!==undefined){
        if(myOpacity!==undefined){
            myOpacity*=opacity
            }else{
            myOpacity=opacity
            }
        }
    if(myOpacity===undefined){
    myOpacity=1
    }
    return myOpacity
};

that.toggle=function(){
    this.visible=!this.visible
    };
    
that.show=function(){
    this.visible=true
    };
    
that.hide=function(){
    this.visible=false
    };
    
that.getTileUrl=function(options){
    var server=MF.Globals.TILE_SERVER;
    var coords=options.coordinates||{
        x:options.x,
        y:options.y,
        z:options.z
        };
        
    if(!options.tileType){
        throw"Tile type (tileType) must be supplied to MF.layer.tile.Base.getTileUrl()"
        }
        var tileType=options.tileType;
    var bgSpec=options.bgColor?encodeURIComponent(["bg_color",options.bgColor].join("=")):"d";
    var layerDict=that.properties.getProperties(secret.queryParametersName).getDict();
    var layerSpec=that.getLayerUrlString({
        zoomLevel:coords.z,
        opacity:options.opacity
        });
    if(layerSpec==""){
        return MF.util.buildStaticUrl("img/blank.gif")
        }
        var apikey=MF.Globals.API_KEY;
    var url=MF.Globals.PROTOCOL+[server,bgSpec,layerSpec,tileType,coords.z,coords.x,coords.y].join("/")+".png";
    return url
    };
    
that.getLegendUrl=function(format,zoomLevel){
    if(!secret.hasLegend){
        return null
        }
        if(!format){
        throw"format parameter required in MF.layer.tile.Base#getLegendUrl()"
        }
        if(!zoomLevel){
        var z=that.get("min_zoom");
        zoomLevel=z?z:2
        }
        var layerSpec=that.getLayerUrlString({
        zoomLevel:zoomLevel
    });
    if(layerSpec===""){
        return null
        }
        var formatSpec="";
    format=format.toLowerCase();
    if(format=="json"){
        formatSpec+="format=json"
        }else{
        if(format=="html-fragment"){
            formatSpec+="format=htmlfrag"
            }else{
            if(format=="html-page"){
                formatSpec+=""
                }else{
                throw"Unknown format "+format+" in MF.layertile.Base#getLegendUrl()"
                }
            }
    }
var url=MF.Globals.PROTOCOL+[MF.Globals.QUERY_SERVER,MF.Globals.API_KEY,"legend",layerSpec].join("/")+"?"+formatSpec;
return url
};

that.getLegend=function(format,zoomLevel,callback,errorCallback){
    if(!format){
        throw"format parameter required in MF.layer.tile.Base#getLegend()"
        }
        if(!callback){
        throw"No callback supplied in MF.layer.tile.Base#getLegend()."
        }
        var url=that.getLegendUrl(format,zoomLevel);
    MF.console.info("MF.layer.tile.Base#getLegend: "+url);
    if(url){
        MF.request.proxy.executeRemoteCall(url,callback,errorCallback)
        }else{
        window.setTimeout(function(callback){
            callback(null)
            },1,errorCallback)
        }
    };

return that.initialize(opts)
}
}());
(function(){
    MF.util.namespace("MF.layer.tile");
    MF.layer.tile.FeatureBase=function(opts,secret){
        var secret=secret||{},that=MF.layer.tile.Base(undefined,secret);
        that.addParam("from",MF.property.GeometryTable());
        that.addParam("date",MF.property.Date());
        that.addParam("where",MF.property.Where());
        that.addParam("geometry_field",MF.property.String());
        return that.initialize(opts)
        }
    }());
(function(){
    MF.util.namespace("MF.layer.tile");
    MF.layer.tile.Thematic=function(options){
        var that=MF.layer.tile.FeatureBase({
            mode:"theme"
        },{
            hasLegend:true
        });
        that.addParam("select",MF.property.String());
        that.addParam("breaks",MF.property.Array(MF.property.Number));
        that.addParam("border",MF.property.ColorStyle({
            size:0.5
        }));
        that.addParam("styles",MF.property.Array(MF.property.Style));
        that.addParam("default_style",MF.property.Style());
        return that.initialize(options)
        }
    }());
(function(){
    MF.util.namespace("MF.layer.tile");
    MF.layer.tile.Simple=function(options){
        var that=MF.layer.tile.FeatureBase({
            mode:"simple"
        });
        that.addParam("border",MF.property.ColorStyle({
            size:0.5
        }));
        that.addParam("style",MF.property.Style());
        return that.initialize(options)
        }
    }());
(function(){
    MF.util.namespace("MF.layer.tile");
    MF.layer.tile.Class=function(options){
        var that=MF.layer.tile.FeatureBase({
            mode:"class"
        },{
            hasLegend:true
        });
        that.addParam("select",MF.property.String());
        that.addParam("values",MF.property.Array(MF.property.String));
        that.addParam("border",MF.property.ColorStyle({
            size:0.5
        }));
        that.addParam("styles",MF.property.Array(MF.property.Style));
        that.addParam("default_style",MF.property.Style());
        return that.initialize(options)
        }
    }());
(function(){
    MF.util.namespace("MF.layer.tile");
    MF.layer.tile.Label=function(options){
        var that=MF.layer.tile.FeatureBase({
            mode:"label"
        });
        that.tileType="label";
        that.addParam("select",MF.property.String());
        that.addParam("face_name",MF.property.Enumeration(MF.layer.tile.Label.FontNames,"DejaVu Sans Book"));
        that.addParam("size",MF.property.PositiveNumber());
        that.addParam("wrap_character",MF.property.String());
        that.addParam("wrap_width",MF.property.PositiveNumber());
        that.addParam("line_spacing",MF.property.PositiveInteger());
        that.addParam("character_spacing",MF.property.PositiveInteger());
        that.addParam("spacing",MF.property.PositiveInteger());
        that.addParam("fill",MF.property.Color("black"));
        that.addParam("halo_fill",MF.property.Color("white"));
        that.addParam("halo_radius",MF.property.PositiveInteger(1));
        that.addParam("dx",MF.property.Integer());
        that.addParam("dy",MF.property.Integer());
        that.addParam("avoid_edges",MF.property.Boolean());
        that.addParam("min_distance",MF.property.PositiveNumber());
        that.addParam("allow_overlap",MF.property.Boolean());
        that.addParam("placement",MF.property.Enumeration(["point","line"]));
        that.addParam("vertical_alignment",MF.property.Enumeration(["top","middle","bottom","auto"]));
        that.addParam("minimum_padding",MF.property.PositiveNumber());
        that.addParam("order_by",MF.property.OrderBy());
        return that.initialize(options)
        };
        
    MF.layer.tile.Label.FontNames=["Airstream Regular","Arial Black Regular","Arial Bold","Arial Bold Italic","Arial Italic","Arial Regular","DejaVu Sans Bold","DejaVu Sans Bold Oblique","DejaVu Sans Book","DejaVu Sans Condensed","DejaVu Sans Condensed Bold","DejaVu Sans Condensed Bold Oblique","DejaVu Sans Condensed Oblique","DejaVu Sans ExtraLight","DejaVu Sans Mono Bold","DejaVu Sans Mono Bold Oblique","DejaVu Sans Mono Book","DejaVu Sans Mono Oblique","DejaVu Sans Oblique","DejaVu Serif Bold","DejaVu Serif Bold Italic","DejaVu Serif Book","DejaVu Serif Condensed","DejaVu Serif Condensed Bold","DejaVu Serif Condensed Bold Italic","DejaVu Serif Italic","Flux Architect Bold","Flux Architect Bold Italic","Flux Architect Italic","Flux Architect Regular","Kells SD Regular","Lintsec Regular","Neuton Regular","Permanent Marker Regular","SF Wonder Comic Blotch Italic","SF Wonder Comic Blotch Regular","SF Wonder Comic Bold","SF Wonder Comic Bold Italic","SF Wonder Comic Inline Italic","SF Wonder Comic Inline Regular","SF Wonder Comic Italic","SF Wonder Comic Regular","Verdana Regular","unifont Medium"]
    }());
(function(){
    MF.util.namespace("MF.layer.tile");
    MF.layer.tile.Named=function(options){
        var that=MF.layer.tile.Base({
            mode:"named"
        });
        if(MF.layer.tile.Named.LayerEnumeration===undefined){
            var enumeration=[],prop;
            MF.layer.tile.Named.LayerEnumeration=[];
            for(prop in MF.layer.tile.Named.Layers){
                if(MF.layer.tile.Named.Layers.hasOwnProperty(prop)){
                    MF.layer.tile.Named.LayerEnumeration.push(MF.layer.tile.Named.Layers[prop])
                    }
                }
            }
            that.addParam("from",MF.property.Enumeration(MF.layer.tile.Named.LayerEnumeration));
    return that.initialize(options)
    };
    
MF.layer.tile.Named.Layers={
    MF_ALL:"umi",
    MF_LAND:"umi_land",
    MF_ROADS:"umi_road",
    MF_ROAD_LABELS:"umi_road_lbl",
    MF_PLACES:"umi_poi",
    MF_PLACE_LABELS:"umi_place_lbl",
    MF_COUNTRY_BOUNDARIES:"umi_admin0_bnd",
    MF_COUNTRY_LABELS:"umi_admin0_lbl",
    MF_STATE_BOUNDARIES:"umi_admin1_bnd",
    MF_STATE_LABELS:"umi_admin1_lbl"
}
}());
(function(){
    MF.util.namespace("MF.layer.tile");
    MF.layer.tile.Composite=function(options,secret){
        var secret=secret||{},that=MF.layer.tile.Base({
            mode:"composite"
        });
        that.add("layers");
        that.addLayers("layers",MF.property.Array(MF.property.Base));
        that.getLayerUrlString=function(modifiers){
            if(!that.visible){
                return""
                }
                var specs=[],zoomLevel=(modifiers)?modifiers.zoomLevel:undefined,layers=that.get("layers"),myOpacity=that.get("opacity"),modOpacity;
            var layerUrl="";
            if(!that.isInZoomRange(zoomLevel)){
                return""
                }
                myOpacity=(myOpacity!==undefined&&myOpacity!==null)?myOpacity:1;
            modOpacity=(modifiers&&modifiers.opacity!==undefined&&modifiers.opacity!==null)?modifiers.opacity:1;
            modOpacity*=myOpacity;
            var newModifiers={
                zoomLevel:zoomLevel,
                opacity:modOpacity
            };
            
            for(var i=0;i<layers.length;i++){
                var layer=layers[i];
                layerUrl=layer.getLayerUrlString(newModifiers);
                if(layerUrl!==""){
                    specs.push(layerUrl)
                    }
                }
            return specs.join("/")
        };
        
    that.getLegendUrl=function(format,zoomLevel){
        if(!format){
            throw"format parameter required in getLegendUrl()"
            }
            if(!that.visible){
            return null
            }
            zoomLevel=zoomLevel?zoomLevel:1;
        var urls=[],layers=that.get("layers"),urlLegend,layer,i;
        for(i=0;i<layers.length;i+=1){
            layer=layers[i];
            if(layer.getLegendUrl!==undefined){
                urlLegend=layer.getLegendUrl(format,zoomLevel);
                if(urlLegend){
                    urls.push(urlLegend.valueOf())
                    }
                }
        }
        return urls
};

that.setOnAll=function(key,value){
    var dict={};
    
    dict[key]=value;
    that.setParamsOnAll(dict)
    };
    
that.setParamsOnAll=function(params){
    var i,layer,layers=that.get("layers"),errors=[];
    for(i=0;i<layers.length;i+=1){
        layer=layers[i];
        try{
            if(layer.setParamsOnAll===undefined){
                layer.setParams(params)
                }else{
                layer.setParamsOnAll(params)
                }
            }catch(error){
        errors.push("\t"+that.get("mode")+": "+error)
        }
    }
    if(errors.length>0){
    errors.unshift("One or more parameters could not be set on the following layers contained within a Composite layer:")
    }
    MF.util.exceptionFromArray(errors)
};

return that.initialize(options)
}
}());
(function(){
    MF.util.namespace("MF.layer.vector");
    MF.layer.vector.Base=function(mode,opts,secret){
        var secret=secret||{},that=MF.request.Request(secret);
        that.query=null;
        that.visible=true;
        that.layerType="vector";
        that.addParam("select",MF.property.Select());
        that.addParam("from",MF.property.GeometryTable());
        that.addParam("date",MF.property.Date());
        that.addParam("geometry_field",MF.property.String());
        that.addParam("opacity",MF.property.Opacity());
        that.addParam("min_zoom",MF.property.Integer(0));
        that.addParam("max_zoom",MF.property.Integer(19));
        that.addParam("mode",MF.property.String(mode));
        that.addParam("where",MF.property.Where());
        that.setQuery=function(sq){
            that.query=sq
            };
            
        that.getQuery=function(){
            return that.query
            };
            
        that.isInZoomRange=function(zoomLevel){
            var layermin=that.get("min_zoom"),layermax=that.get("max_zoom");
            if(zoomLevel!==undefined){
                layermin=(layermin!==undefined)?layermin:0;
                layermax=(layermax!==undefined)?layermax:19;
                if(layermin>zoomLevel||layermax<zoomLevel){
                    return false
                    }
                }
            return true
        };
        
    that.toggle=function(){
        this.visible=!this.visible
        };
        
    that.show=function(){
        this.visible=true
        };
        
    that.hide=function(){
        this.visible=false
        };
        
    that.getLegendUrl=function(format,zoomLevel){
        return null
        };
        
    that.initialize=function(arg){
        that.set(arg);
        var sq=MF.query.Spatial({
            select:arg.select,
            from:arg.from,
            where:arg.where
            });
        that.setQuery(sq);
        return that
        };
        
    return that.initialize(opts)
    }
}());
(function(){
    MF.util.namespace("MF.layer.vector");
    MF.layer.vector.Simple=function(options){
        var that=MF.layer.vector.Base("vector",options);
        that.addParam("icons",MF.property.Icon());
        that.addParam("color",MF.property.ColorStyle());
        that.addParam("border",MF.property.ColorStyle());
        return that.initialize(options)
        }
    }());
(function(){
    MF.util.namespace("MF.property");
    MF.property.Properties=function(secret){
        var secret=secret||{},properties={};
        
        return{
            addProperties:function(name,compound){
                var compound=compound||MF.property.Compound();
                properties[name]=compound;
                return compound
                },
            setProperties:function(name,hashtable){
                if(arguments.length>1&&name){
                    var compound=properties[name];
                    compound.set(hashtable)
                    }else{
                    hashtable=name;
                    var key,parameter,errors=[],errorMessage="";
                    if(hashtable!==undefined){
                        for(key in hashtable){
                            if(hashtable.hasOwnProperty(key)){
                                try{
                                    this.setProperty(key,hashtable[key])
                                    }catch(error){
                                    errors.push(error.toString())
                                    }
                                }
                        }
                            if(errors.length>0){
                    errorMessage=errors.join("\n");
                    throw errorMessage
                    }
                }
        }
},
getProperties:function(key){
    if(key){
        return properties[key]
        }
        var ps={};
    
    MF.util.shallowCopy(ps,properties);
    return ps
    },
addProperty:function(name,key,property){
    var p=properties[name];
    if(p===undefined){
        p=properties[name]=MF.property.Compound()
        }
        p.addProperty(key,property)
    },
setProperty:function(key,value){
    var p,index,encountered=false;
    for(index in properties){
        if(properties.hasOwnProperty(index)){
            p=properties[index];
            if(p.hasProperty(key)){
                p.setProperty(key,value);
                encountered=true;
                break
            }
        }
    }
    if(!encountered){
    throw"Property named '"+key+"' not found in properties."
    }
},
getProperty:function(key){
    var p,index;
    for(index in properties){
        if(properties.hasOwnProperty(index)){
            p=properties[index];
            if(p.hasProperty(key)){
                return p.getProperty(key)
                }
            }
    }
    throw"Property named '"+key+"' not found in properties."
},
get:function(key){
    var p,index;
    for(index in properties){
        if(properties.hasOwnProperty(index)){
            p=properties[index];
            if(p.hasProperty(key)){
                return p.get(key)
                }
            }
    }
    throw"Property named '"+key+"' not found in properties."
},
getPropertiesNames:function(name){
    var key,array=[];
    if(typeof name!=="undefined"){
        return properties[name].getPropertyNames()
        }
        for(key in properties){
        if(properties.hasOwnProperty(key)){
            if(properties[key].getPropertyNames){
                array=array.concat(properties[key].getPropertyNames())
                }
            }
    }
    return array
}
}
}
}());
(function(){
    MF.util.namespace("MF.property");
    MF.property.Base=function(value){
        var that={};
        
        var val;
        that.args=arguments;
        that.get=function(){
            return val
            };
            
        that.set=function(value){
            if(value!==undefined){
                that.validate(value)
                }
                val=value
            };
            
        that.validate=function(arg){
            return
        };
        
        that.toString=function(){
            var s=""+that.get();
            return s
            };
            
        that.toUrlString=function(){
            return encodeURIComponent(that.toString())
            };
            
        that.initialize=function(val){
            if(val!==undefined){
                that.set(val)
                }
                return that
            };
            
        return that.initialize(value)
        }
    }());
(function(){
    MF.util.namespace("MF.property");
    MF.property.Properties=function(secret){
        var secret=secret||{},properties={};
        
        return{
            addProperties:function(name,compound){
                var compound=compound||MF.property.Compound();
                properties[name]=compound;
                return compound
                },
            setProperties:function(name,hashtable){
                if(arguments.length>1&&name){
                    var compound=properties[name];
                    compound.set(hashtable)
                    }else{
                    hashtable=name;
                    var key,parameter,errors=[],errorMessage="";
                    if(hashtable!==undefined){
                        for(key in hashtable){
                            if(hashtable.hasOwnProperty(key)){
                                try{
                                    this.setProperty(key,hashtable[key])
                                    }catch(error){
                                    errors.push(error.toString())
                                    }
                                }
                        }
                            if(errors.length>0){
                    errorMessage=errors.join("\n");
                    throw errorMessage
                    }
                }
        }
},
getProperties:function(key){
    if(key){
        return properties[key]
        }
        var ps={};
    
    MF.util.shallowCopy(ps,properties);
    return ps
    },
addProperty:function(name,key,property){
    var p=properties[name];
    if(p===undefined){
        p=properties[name]=MF.property.Compound()
        }
        p.addProperty(key,property)
    },
setProperty:function(key,value){
    var p,index,encountered=false;
    for(index in properties){
        if(properties.hasOwnProperty(index)){
            p=properties[index];
            if(p.hasProperty(key)){
                p.setProperty(key,value);
                encountered=true;
                break
            }
        }
    }
    if(!encountered){
    throw"Property named '"+key+"' not found in properties."
    }
},
getProperty:function(key){
    var p,index;
    for(index in properties){
        if(properties.hasOwnProperty(index)){
            p=properties[index];
            if(p.hasProperty(key)){
                return p.getProperty(key)
                }
            }
    }
    throw"Property named '"+key+"' not found in properties."
},
get:function(key){
    var p,index;
    for(index in properties){
        if(properties.hasOwnProperty(index)){
            p=properties[index];
            if(p.hasProperty(key)){
                return p.get(key)
                }
            }
    }
    throw"Property named '"+key+"' not found in properties."
},
getPropertiesNames:function(name){
    var key,array=[];
    if(typeof name!=="undefined"){
        return properties[name].getPropertyNames()
        }
        for(key in properties){
        if(properties.hasOwnProperty(key)){
            if(properties[key].getPropertyNames){
                array=array.concat(properties[key].getPropertyNames())
                }
            }
    }
    return array
}
}
}
}());
(function(){
    MF.util.namespace("MF.property");
    MF.property.GeoJsonGeometry=function(value){
        var that=MF.property.Base(),superValidate=that.validate,geometryTypes=["Point","MultiPoint","LineString","MultiLineString","Polygon","MultiPolygon"];
        that.validate=function(arg){
            superValidate.apply(that,arguments);
            if(typeof arg!=="object"){
                throw"GeoJsonGeometry must be an object, not "+typeof arg
                }
                if(arg.type===undefined){
                throw"GeoJsonGeometry objects must have the type paramterer"
                }
                if(arg.type==="GeometryCollection"){
                if(arg.geometries===undefined){
                    throw"GeometryCollection must have the geometries property"
                    }
                }else{
            try{
                MF.property.Enumeration(geometryTypes,arg.type)
                }catch(e){
                throw"Invalid type "+arg.type
                }
                if(arg.coordinates===undefined){
                throw"GeoJsonGeometry objects with type "+arg.type+" must have the coordinates parameter"
                }
            }
    };

that.toUrlString=function(){
    return JSON.stringify(that.get())
    };
    
that.toString=that.toUrlString;
return that.initialize(value)
    };
    
MF.property.Geometry=function(value,secret){
    var secret=secret||{},that=MF.property.Flex(secret);
    that.validate=function(arg){
        if(typeof arg!=="object"&&typeof arg!=="string"){
            throw"Geometry must be an object, not "+typeof arg
            }
            if(typeof arg==="string"){
            secret.composedProperty=MF.property.String()
            }else{
            if(arg.type!==undefined){
                secret.composedProperty=MF.property.GeoJsonGeometry()
                }else{
                if(arg.geometryTable!==undefined){
                    secret.composedProperty=MF.property.FeatureId()
                    }else{
                    if(arg.distance!==undefined){
                        secret.composedProperty=MF.property.Range()
                        }else{
                        throw"Geometry must be a valid GeoJsonGeometry, FeatureId or Range object."
                        }
                    }
            }
    }
secret.composedProperty.validate(arg)
};

return that.initialize(value)
};

MF.property.Range=function(value,secret){
    var secret=secret||{},that=MF.property.Composed(secret);
    secret.properties.geometry=MF.property.Geometry();
    secret.properties.distance=MF.property.PositiveNumber();
    secret.properties.units=MF.property.Enumeration(["m","mi","ft","km"],"m");
    that.toString=function(){
        return"range("+that.get("distance")+that.get("units")+", "+that.getProperty("geometry").toUrlString()+")"
        };
        
    that.toUrlString=that.toString;
    return that.initialize(value)
    };
    
MF.property.Range.DistanceUnits={
    METERS:"m",
    MILES:"mi",
    FEET:"ft",
    KILOMETERS:"km"
}
}());
(function(){
    MF.util.namespace("MF.property");
    MF.property.Select=function(value,secret){
        var secret=secret||{},that=MF.property.Flex(secret);
        that.validate=function(arg){
            if(MF.util.typeOf(arg)==="array"){
                secret.composedProperty=MF.property.Array(MF.property.String)
                }else{
                if(MF.util.typeOf(arg)==="object"){
                    secret.composedProperty=MF.property.SelectAs()
                    }else{
                    throw"Select property must be an object or array, not "+(typeof arg)
                    }
                }
            secret.composedProperty.validate(arg)
        };
        
    return that.initialize(value)
    };
    
MF.property.SelectAs=function(value,secret){
    var secret=secret||{},that=MF.property.Composed(secret),super_validateOne=that.validateOne;
    that.validateOne=function(key,value,skip_value_validation){
        if(secret.properties[key]===undefined){
            secret.properties[key]=MF.property.String()
            }
            super_validateOne.apply(that,[key,value,skip_value_validation])
        };
        
    that.toUrlString=function(){
        var strs=[],name,expr;
        for(name in secret.properties){
            expr=secret.properties[name];
            strs.push(expr.toUrlString()+" AS "+encodeURIComponent(name))
            }
            return strs.join(",")
        };
        
    return that.initialize(value)
    }
}());
(function(){
    MF.util.namespace("MF.property");
    MF.property.Compound=function(opts,secret){
        var secret=secret||{},that={};
        
        secret.properties={};
        
        that.set=function(newOpts){
            var key,errors=[];
            if(typeof newOpts==="string"){
                errors.push("Attempting to set a compound object with type string, should be type Object.")
                }else{
                for(key in newOpts){
                    if(newOpts.hasOwnProperty(key)){
                        secret.setPropertyHelper(key,newOpts[key],errors)
                        }
                    }
                }
                MF.util.exceptionFromArray(errors)
    };
    
that.addProperty=function(name,property){
    secret.properties[name]=property
    };
    
that.getProperty=function(key){
    return secret.properties[key]
    };
    
that.get=function(key){
    if(key===undefined){
        return that.getDict()
        }
        return that.getProperty(key).get()
    };
    
that.setProperty=function(key,value){
    var errors=[];
    secret.setPropertyHelper(key,value,errors);
    MF.util.exceptionFromArray(errors)
    };
    
that.getPropertyNames=function(){
    var names=[],props=secret.properties,key;
    for(key in props){
        if(props.hasOwnProperty(key)){
            names.push(key)
            }
        }
    return names
};

that.getDict=function(){
    var dict={},key,value;
    for(key in secret.properties){
        value=secret.properties[key].get();
        if(value!==undefined){
            dict[key]=secret.properties[key].get()
            }
        }
    return dict
};

that.toUrlString=function(){
    var a=[],props=secret.properties,urlString,key,property,value,toStringFunction,valString;
    for(key in props){
        if(props.hasOwnProperty(key)){
            property=props[key];
            value=property.get();
            if(value!==undefined){
                toStringFunction=(property.toUrlString!==undefined)?property.toUrlString:function(){
                    var string=property.toString();
                    string=encodeURIComponent(string);
                    return string
                    };
                    
                valString=toStringFunction();
                if(valString!==""){
                    a.push(encodeURIComponent(key)+"="+valString)
                    }
                }
        }
    }
    urlString=a.join("&");
return urlString
};

that.hasProperty=function(key){
    return secret.properties.hasOwnProperty(key)
    };
    
that.clone=function(){
    var newProps={},key,newKey,compound,newCompound,mfcp;
    for(key in secret.properties){
        newKey=key+"_";
        newKey=newKey.slice(0,newKey.length-1);
        compound=secret.properties[key];
        newCompound=compound.clone();
        newProps[newKey]=newCompound
        }
        mfcp=MF.property.Compound();
    mfcp.toUrlString=that.toUrlString;
    mfcp.toString=that.toString;
    mfcp.addProperties(newProps);
    return mfcp
    };
    
that.addProperties=function(props){
    secret.properties=props
    };
    
secret.setPropertyHelper=function(key,value,errors){
    var property;
    if(secret.properties.hasOwnProperty(key)){
        property=that.getProperty(key);
        try{
            property.set(value)
            }catch(error){
            if(errors){
                errors.push("Problem encountered with property '"+key+"': "+error.toString())
                }
            }
    }else{
    if(errors){
        errors.push("Unsupported option '"+key+"' for this object.")
        }
    }
};

that.initialize=function(newOpts){
    that.set(newOpts);
    return that
    };
    
return that.initialize(opts)
}
}());
(function(){
    MF.util.namespace("MF.property");
    MF.property.Composed=function(secret){
        var secret=secret||{},that=MF.property.Base();
        if(!secret.hasOwnProperty("properties")){
            secret.properties={}
        }
        that.set=function(value){
        var key;
        that.validate(value,true);
        for(key in value){
            if(value.hasOwnProperty(key)){
                secret.properties[key].set(value[key])
                }
            }
        };
        
that.get=function(key){
    if(key!==undefined){
        return secret.properties[key].get()
        }
        var response={},key,value;
    for(key in secret.properties){
        value=secret.properties[key].get();
        if(value!==undefined){
            response[key]=secret.properties[key].get()
            }
        }
    return response
};

that.getProperty=function(key){
    return secret.properties[key]
    };
    
that.propertyUrlString=function(key){
    return secret.properties[key].toUrlString()
    };
    
that.validate=function(value,skip_value_validation){
    var key;
    if(typeof value!=="object"){
        throw"Attempting to set a compound object with type "+typeof value+", should be type Object."
        }
        for(key in value){
        if(value.hasOwnProperty(key)&&value[key]!==undefined){
            that.validateOne(key,value[key],skip_value_validation)
            }
        }
    };
    
that.validateOne=function(key,value,skip_value_validation){
    if(secret.properties[key]!==undefined){
        if(skip_value_validation!==true){
            secret.properties[key].validate(value)
            }
        }else{
    throw"Unsupported option '"+key+"' for this object."
    }
};

that.toUrlString=function(){
    throw"Derived class must override the toUrlString() method of abstract class MF.property.Composed"
    };
    
return that
}
}());
(function(){
    MF.util.namespace("MF.property");
    MF.property.Enumeration=function(allowedValues,value){
        var that=MF.property.Base();
        if(!allowedValues||allowedValues.length===0){
            throw"The allowedValues enumeration in MF.property.Enumeration cannot be empty or null"
            }
            that.validate=function(arg){
            var i;
            if(MF.util.typeOf(allowedValues)==="object"){
                for(key in allowedValues){
                    if(key===arg){
                        return
                    }
                }
                }else{
        for(i=0;i<allowedValues.length;i++){
            if(allowedValues[i]===arg){
                return true
                }
            }
        }
    throw"The value '"+arg+"' was not found in the enumeration ["+allowedValues+"]."
};

return that.initialize(value)
}
}());
(function(){
    MF.util.namespace("MF.property");
    MF.property.Flex=function(secret){
        var that=MF.property.Base();
        if(secret===undefined){
            throw"Derived classes must pass the secret to MF.property.Flex()"
            }
            that.get=function(){
            return secret.composedProperty?secret.composedProperty.get():undefined
            };
            
        that.set=function(value){
            if(value!==undefined){
                that.validate(value);
                secret.composedProperty.set(value)
                }else{
                secret.composedProperty=undefined
                }
            };
        
    that.validate=function(arg){
        throw"Derived class must override the validate() method of abstract class MF.property.Flex"
        };
        
    that.toUrlString=function(){
        return secret.composedProperty?secret.composedProperty.toUrlString():""
        };
        
    that.toString=function(){
        return secret.composedProperty?secret.composedProperty.toString():"undefined"
        };
        
    return that
    }
}());
(function(){
    MF.util.namespace("MF.property");
    MF.property.Integer=function(value){
        var that=MF.property.Base();
        that.validate=function(arg){
            var type=MF.util.typeOf(arg);
            if(type==="int"){
                return
            }
            throw"Invalid argument exception. Expected type int, got "+arg+", typeof: "+type
            };
            
        return that.initialize(value)
        };
        
    MF.property.PositiveInteger=function(value){
        var that=MF.property.Integer(),super_validate=that.validate;
        that.validate=function(arg){
            super_validate.apply(that,[arg]);
            if(arg>0){
                return
            }
            throw"Invalid argument exception. Expected a positive integer, got "+arg
            };
            
        return that.initialize(value)
        };
        
    MF.property.Limit=function(value){
        var that=MF.property.Integer(),super_validate=that.validate;
        that.validate=function(arg){
            super_validate.apply(that,[arg]);
            if(arg<=100&&arg>=0){
                return
            }
            throw"Invalid argument exception. Expected a positive integer <= 100, got "+arg
            };
            
        return that.initialize(value)
        };
        
    MF.property.String=function(value){
        var that=MF.property.Base(),expectedType="string";
        that.validate=function(arg){
            var type=MF.util.typeOf(arg);
            if(type===expectedType){
                return
            }
            throw"Invalid argument exception. Expected type '"+expectedType+"', got '"+type+"' whose value is '"+arg+"'."
            };
            
        return that.initialize(value)
        };
        
    MF.property.Boolean=function(value){
        var that=MF.property.Base();
        that.toUrlString=function(){
            if(that.get()===true){
                return"true"
                }else{
                if(that.get()===true){
                    return"false"
                    }
                }
            return""
        };
        
    that.validate=function(arg){
        if(MF.util.typeOf(arg)==="boolean"){
            return
        }
        throw"Invalid argument exception. Expected type boolean'', got '"+MF.util.typeOf(arg)+"' whose value is '"+arg+"'."
        };
        
    return that.initialize(value)
    };
    
MF.property.Number=function(value){
    var that=MF.property.Base(),expectedType="number";
    that.validate=function(arg){
        var type=typeof arg;
        if(type===expectedType){
            return
        }
        throw"Invalid argument exception. Expected type "+expectedType+", got "+type
        };
        
    return that.initialize(value)
    };
    
MF.property.PositiveNumber=function(value){
    var that=MF.property.Number(),super_validate=that.validate;
    that.validate=function(arg){
        super_validate.apply(that,[arg]);
        if(arg>0){
            return
        }
        throw"Invalid argument exception. Expected a positive number, got "+arg
        };
        
    return that.initialize(value)
    };
    
MF.property.Where=function(value){
    var that=MF.property.Base();
    that.toUrlString=function(){
        var value=that.get(),str=""+value;
        if(value.length>1){
            str="AND("+str+")"
            }
            return str
        };
        
    return that.initialize(value)
    };
    
MF.property.OrderBy=function(value){
    var that=MF.property.Array(MF.property.String);
    return that.initialize(value)
    };
    
MF.property.GeometryTable=function(value){
    var that=MF.property.String();
    return that.initialize(value)
    };
    
MF.property.Opacity=function(value){
    var that=MF.property.Number(),super_validate=that.validate;
    that.validate=function(arg){
        super_validate.apply(that,[arg]);
        if(arg>=0&&arg<=1){
            return
        }
        throw"Opacity must be a decimal between 0 and 1, got "+arg
        };
        
    return that.initialize(value)
    }
}());
(function(){
    MF.util.namespace("MF.property");
    MF.property.Date=function(value){
        var that=MF.property.Base(),super_validate=that.validate;
        that.validate=function(){
            if(that.get()){
                super_validate.apply(that,arguments);
                try{
                    that.toUrlString()
                    }catch(e){
                    throw"The Mapfluence Date property must hold a Javascript Date object, current value is "+that.get()+"."
                    }
                }
        };
    
that.toUrlString=function(){
    var val=that.get(),year=val.getUTCFullYear(),month=val.getUTCMonth()+1,date=val.getUTCDate(),h=val.getUTCHours(),m=val.getUTCMinutes(),s=val.getUTCSeconds(),ms=val.getUTCMilliseconds(),date_str=""+year+"-";
    if(month<10){
        date_str+="0"
        }
        date_str+=month+"-";
    if(date<10){
        date_str+="0"
        }
        date_str+=date+"T";
    if(h<10){
        date_str+="0"
        }
        date_str+=h+":";
    if(m<10){
        date_str+="0"
        }
        date_str+=m+":";
    if(s<10){
        date_str+="0"
        }
        date_str+=s;
    if(ms){
        date_str+="."+ms
        }
        return date_str+"Z"
    };
    
that.toString=that.toUrlString;
return that.initialize(value)
    }
}());
(function(){
    MF.util.namespace("MF.property");
    MF.property.FeatureId=function(value,secret){
        var secret=secret||{},that=MF.property.Composed(secret),super_set=that.set;
        secret.properties.geometryTable=MF.property.String();
        secret.properties.id=MF.property.String();
        secret.properties.date=MF.property.Date();
        that.set=function(arg){
            var dateSplit,namesplit,params={};
            
            if((typeof arg)==="string"){
                dateSplit=arg.split("@");
                if(dateSplit.length===2){
                    params.date=dateSplit[1]
                    }
                    nameSplit=dateSplit[0].split(".");
                if(nameSplit.length!==4){
                    throw"Invalid feature ID: "+arg
                    }
                    if(nameSplit.length>2){
                    params.geometryTable=nameSplit[0]+"."+nameSplit[1]+nameSplit[2]
                    }
                    if(nameSplit[3]){
                    params.id=nameSplit[3]
                    }
                    arg=params
                }
                super_set.apply(that,[arg])
            };
            
        that.toUrlString=function(){
            var urlString="",geometryTable=encodeURIComponent(that.propertyUrlString("geometryTable")),id=encodeURIComponent(that.propertyUrlString("id")),date=encodeURIComponent(that.propertyUrlString("date"));
            if(geometryTable){
                urlString+=geometryTable
                }
                if(id){
                urlString+="."+id
                }
                if(date){
                urlString+="@"+date
                }
                return urlString
            };
            
        that.toString=that.toUrlString;
        return that.initialize(value)
        }
    }());
(function(){
    MF.util.namespace("MF.property");
    MF.property.Array=function(propertyConstructor,value,urlBrackets,secret){
        var secret=secret||{},that=MF.property.Base();
        if(!secret.hasOwnProperty("properties")){
            secret.properties=[]
            }
            that.set=function(value){
            var i;
            that.validate(value);
            secret.properties=[];
            for(i=0;i<value.length;i++){
                secret.properties.push(propertyConstructor(value[i]))
                }
            };
            
    that.get=function(){
        var response=[],i;
        if(secret.properties.length===0){
            return undefined
            }
            for(i=0;i<secret.properties.length;i++){
            response.push(secret.properties[i].get())
            }
            return response
        };
        
    that.validate=function(value){
        if(MF.util.typeOf(value)!=="array"){
            throw"Attempting to set an array object with type "+MF.util.typeOf(value)+", should be type array."
            }
        };
    
that.toString=function(){
    var temp=[],i;
    for(i=0;i<secret.properties.length;i++){
        temp.push(secret.properties[i].toString())
        }
        return"["+temp.join(", ")+"]"
    };
    
that.toUrlString=function(){
    var temp=[],i;
    for(i=0;i<secret.properties.length;i++){
        temp.push(secret.properties[i].toUrlString())
        }
        return urlBrackets?"["+temp.join(",")+"]":temp.join(",")
    };
    
that.initialize(value);
    return that
    }
}());
(function(){
    MF.util.namespace("MF.util");
    MF.util.getColorPalette=function(name,numColors){
        name=name.toLowerCase();
        numColors=numColors||Number.MAX_VALUE-1;
        var schemeNames=[];
        var sizes=[];
        for(var scheme in MF.util.ColorPalettes){
            schemeNames.push(scheme);
            var parts=scheme.split("-");
            if(parts[0]===name){
                sizes.push(Number(parts[1]))
                }
            }
        var closest=MF.util.findClosest(numColors,sizes);
    name+="-"+closest;
    return MF.util.ColorPalettes[name]
    };
    
MF.util.getStylePalette=function(name,numColors,sizes){
    var palette=MF.util.getColorPalette(name,numColors),result=[],i;
    if(sizes===undefined){
        for(i=0;i<palette.length;i++){
            result.push({
                color:palette[i]
                })
            }
        }else{
    if(MF.util.typeOf(sizes)==="number"){
        for(i=0;i<palette.length;i++){
            result.push({
                color:palette[i],
                size:sizes
            })
            }
        }else{
    if(MF.util.typeOf(sizes)==="array"){
        for(i=0;i<palette.length;i++){
            result.push({
                color:palette[i],
                size:i<sizes.length?sizes[i]:sizes[sizes.length-1]
                })
            }
        }else{
    throw"Sizes parameter must either be undefined, a Number, or an Array. Was type "+MF.util.typeOf(sizes)+"."
    }
}
}
return result
};

MF.util.ColorPalettes={
    "accent-3":["7FC97F","BEAED4","FDC086"],
    "accent-4":["7FC97F","BEAED4","FDC086","FFFF99"],
    "accent-5":["7FC97F","BEAED4","FDC086","FFFF99","386CB0"],
    "accent-6":["7FC97F","BEAED4","FDC086","FFFF99","386CB0","F0027F"],
    "accent-7":["7FC97F","BEAED4","FDC086","FFFF99","386CB0","F0027F","BF5B17"],
    "accent-8":["7FC97F","BEAED4","FDC086","FFFF99","386CB0","F0027F","BF5B17","666666"],
    "blues-3":["DEEBF7","9ECAE1","3182BD"],
    "blues-4":["EFF3FF","BDD7E7","6BAED6","2171B5"],
    "blues-5":["EFF3FF","BDD7E7","6BAED6","3182BD","08519C"],
    "blues-6":["EFF3FF","C6DBEF","9ECAE1","6BAED6","3182BD","08519C"],
    "blues-7":["EFF3FF","C6DBEF","9ECAE1","6BAED6","4292C6","2171B5","084594"],
    "blues-8":["F7FBFF","DEEBF7","C6DBEF","9ECAE1","6BAED6","4292C6","2171B5","084594"],
    "blues-9":["F7FBFF","DEEBF7","C6DBEF","9ECAE1","6BAED6","4292C6","2171B5","08519C","08306B"],
    "brbg-3":["D8B365","F5F5F5","5AB4AC"],
    "brbg-4":["A6611A","DFC27D","80CDC1","018571"],
    "brbg-5":["A6611A","DFC27D","F5F5F5","80CDC1","018571"],
    "brbg-6":["8C510A","D8B365","F6E8C3","C7EAE5","5AB4AC","01665E"],
    "brbg-7":["8C510A","D8B365","F6E8C3","F5F5F5","C7EAE5","5AB4AC","01665E"],
    "brbg-8":["8C510A","BF812D","DFC27D","F6E8C3","C7EAE5","80CDC1","35978F","01665E"],
    "brbg-9":["8C510A","BF812D","DFC27D","F6E8C3","F5F5F5","C7EAE5","80CDC1","35978F","01665E"],
    "brbg-10":["543005","8C510A","BF812D","DFC27D","F6E8C3","C7EAE5","80CDC1","35978F","01665E","003C30"],
    "brbg-11":["543005","8C510A","BF812D","DFC27D","F6E8C3","F5F5F5","C7EAE5","80CDC1","35978F","01665E","003C30"],
    "bugn-3":["E5F5F9","99D8C9","2CA25F"],
    "bugn-4":["EDF8FB","B2E2E2","66C2A4","238B45"],
    "bugn-5":["EDF8FB","B2E2E2","66C2A4","2CA25F","006D2C"],
    "bugn-6":["EDF8FB","CCECE6","99D8C9","66C2A4","2CA25F","006D2C"],
    "bugn-7":["EDF8FB","CCECE6","99D8C9","66C2A4","41AE76","238B45","005824"],
    "bugn-8":["F7FCFD","E5F5F9","CCECE6","99D8C9","66C2A4","41AE76","238B45","005824"],
    "bugn-9":["F7FCFD","E5F5F9","CCECE6","99D8C9","66C2A4","41AE76","238B45","006D2C","00441B"],
    "bupu-3":["E0ECF4","9EBCDA","8856A7"],
    "bupu-4":["EDF8FB","B3CDE3","8C96C6","88419D"],
    "bupu-5":["EDF8FB","B3CDE3","8C96C6","8856A7","810F7C"],
    "bupu-6":["EDF8FB","BFD3E6","9EBCDA","8C96C6","8856A7","810F7C"],
    "bupu-7":["EDF8FB","BFD3E6","9EBCDA","8C96C6","8C6BB1","88419D","6E016B"],
    "bupu-8":["F7FCFD","E0ECF4","BFD3E6","9EBCDA","8C96C6","8C6BB1","88419D","6E016B"],
    "bupu-9":["F7FCFD","E0ECF4","BFD3E6","9EBCDA","8C96C6","8C6BB1","88419D","810F7C","4D004B"],
    "dark2-3":["1B9E77","D95F02","7570B3"],
    "dark2-4":["1B9E77","D95F02","7570B3","E7298A"],
    "dark2-5":["1B9E77","D95F02","7570B3","E7298A","66A61E"],
    "dark2-6":["1B9E77","D95F02","7570B3","E7298A","66A61E","E6AB02"],
    "dark2-7":["1B9E77","D95F02","7570B3","E7298A","66A61E","E6AB02","A6761D"],
    "dark2-8":["1B9E77","D95F02","7570B3","E7298A","66A61E","E6AB02","A6761D","666666"],
    "gnbu-3":["E0F3DB","A8DDB5","43A2CA"],
    "gnbu-4":["F0F9E8","BAE4BC","7BCCC4","2B8CBE"],
    "gnbu-5":["F0F9E8","BAE4BC","7BCCC4","43A2CA","0868AC"],
    "gnbu-6":["F0F9E8","CCEBC5","A8DDB5","7BCCC4","43A2CA","0868AC"],
    "gnbu-7":["F0F9E8","CCEBC5","A8DDB5","7BCCC4","4EB3D3","2B8CBE","08589E"],
    "gnbu-8":["F7FCF0","E0F3DB","CCEBC5","A8DDB5","7BCCC4","4EB3D3","2B8CBE","08589E"],
    "gnbu-9":["F7FCF0","E0F3DB","CCEBC5","A8DDB5","7BCCC4","4EB3D3","2B8CBE","0868AC","084081"],
    "greens-3":["E5F5E0","A1D99B","31A354"],
    "greens-4":["EDF8E9","BAE4B3","74C476","238B45"],
    "greens-5":["EDF8E9","BAE4B3","74C476","31A354","006D2C"],
    "greens-6":["EDF8E9","C7E9C0","A1D99B","74C476","31A354","006D2C"],
    "greens-7":["EDF8E9","C7E9C0","A1D99B","74C476","41AB5D","238B45","005A32"],
    "greens-8":["F7FCF5","E5F5E0","C7E9C0","A1D99B","74C476","41AB5D","238B45","005A32"],
    "greens-9":["F7FCF5","E5F5E0","C7E9C0","A1D99B","74C476","41AB5D","238B45","006D2C","00441B"],
    "greys-3":["F0F0F0","BDBDBD","636363"],
    "greys-4":["F7F7F7","CCCCCC","969696","525252"],
    "greys-5":["F7F7F7","CCCCCC","969696","636363","252525"],
    "greys-6":["F7F7F7","D9D9D9","BDBDBD","969696","636363","252525"],
    "greys-7":["F7F7F7","D9D9D9","BDBDBD","969696","737373","525252","252525"],
    "greys-8":["FFFFFF","F0F0F0","D9D9D9","BDBDBD","969696","737373","525252","252525"],
    "greys-9":["FFFFFF","F0F0F0","D9D9D9","BDBDBD","969696","737373","525252","252525","000000"],
    "oranges-3":["FEE6CE","FDAE6B","E6550D"],
    "oranges-4":["FEEDDE","FDBE85","FD8D3C","D94701"],
    "oranges-5":["FEEDDE","FDBE85","FD8D3C","E6550D","A63603"],
    "oranges-6":["FEEDDE","FDD0A2","FDAE6B","FD8D3C","E6550D","A63603"],
    "oranges-7":["FEEDDE","FDD0A2","FDAE6B","FD8D3C","F16913","D94801","8C2D04"],
    "oranges-8":["FFF5EB","FEE6CE","FDD0A2","FDAE6B","FD8D3C","F16913","D94801","8C2D04"],
    "oranges-9":["FFF5EB","FEE6CE","FDD0A2","FDAE6B","FD8D3C","F16913","D94801","A63603","7F2704"],
    "orrd-3":["FEE8C8","FDBB84","E34A33"],
    "orrd-4":["FEF0D9","FDCC8A","FC8D59","D7301F"],
    "orrd-5":["FEF0D9","FDCC8A","FC8D59","E34A33","B30000"],
    "orrd-6":["FEF0D9","FDD49E","FDBB84","FC8D59","E34A33","B30000"],
    "orrd-7":["FEF0D9","FDD49E","FDBB84","FC8D59","EF6548","D7301F","990000"],
    "orrd-8":["FFF7EC","FEE8C8","FDD49E","FDBB84","FC8D59","EF6548","D7301F","990000"],
    "orrd-9":["FFF7EC","FEE8C8","FDD49E","FDBB84","FC8D59","EF6548","D7301F","B30000","7F0000"],
    "paired-3":["A6CEE3","1F78B4","B2DF8A"],
    "paired-4":["A6CEE3","1F78B4","B2DF8A","33A02C"],
    "paired-5":["A6CEE3","1F78B4","B2DF8A","33A02C","FB9A99"],
    "paired-6":["A6CEE3","1F78B4","B2DF8A","33A02C","FB9A99","E31A1C"],
    "paired-7":["A6CEE3","1F78B4","B2DF8A","33A02C","FB9A99","E31A1C","FDBF6F"],
    "paired-8":["A6CEE3","1F78B4","B2DF8A","33A02C","FB9A99","E31A1C","FDBF6F","FF7F00"],
    "paired-9":["A6CEE3","1F78B4","B2DF8A","33A02C","FB9A99","E31A1C","FDBF6F","FF7F00","CAB2D6"],
    "paired-10":["A6CEE3","1F78B4","B2DF8A","33A02C","FB9A99","E31A1C","FDBF6F","FF7F00","CAB2D6","6A3D9A"],
    "paired-11":["A6CEE3","1F78B4","B2DF8A","33A02C","FB9A99","E31A1C","FDBF6F","FF7F00","CAB2D6","6A3D9A","FFFF99"],
    "paired-12":["A6CEE3","1F78B4","B2DF8A","33A02C","FB9A99","E31A1C","FDBF6F","FF7F00","CAB2D6","6A3D9A","FFFF99","B15928"],
    "pastel1-3":["FBB4AE","B3CDE3","CCEBC5"],
    "pastel1-4":["FBB4AE","B3CDE3","CCEBC5","DECBE4"],
    "pastel1-5":["FBB4AE","B3CDE3","CCEBC5","DECBE4","FED9A6"],
    "pastel1-6":["FBB4AE","B3CDE3","CCEBC5","DECBE4","FED9A6","FFFFCC"],
    "pastel1-7":["FBB4AE","B3CDE3","CCEBC5","DECBE4","FED9A6","FFFFCC","E5D8BD"],
    "pastel1-8":["FBB4AE","B3CDE3","CCEBC5","DECBE4","FED9A6","FFFFCC","E5D8BD","FDDAEC"],
    "pastel1-9":["FBB4AE","B3CDE3","CCEBC5","DECBE4","FED9A6","FFFFCC","E5D8BD","FDDAEC","F2F2F2"],
    "pastel2-3":["B3E2CD","FDCDAC","CBD5E8"],
    "pastel2-4":["B3E2CD","FDCDAC","CBD5E8","F4CAE4"],
    "pastel2-5":["B3E2CD","FDCDAC","CBD5E8","F4CAE4","E6F5C9"],
    "pastel2-6":["B3E2CD","FDCDAC","CBD5E8","F4CAE4","E6F5C9","FFF2AE"],
    "pastel2-7":["B3E2CD","FDCDAC","CBD5E8","F4CAE4","E6F5C9","FFF2AE","F1E2CC"],
    "pastel2-8":["B3E2CD","FDCDAC","CBD5E8","F4CAE4","E6F5C9","FFF2AE","F1E2CC","CCCCCC"],
    "piyg-3":["E9A3C9","F7F7F7","A1D76A"],
    "piyg-4":["D01C8B","F1B6DA","B8E186","4DAC26"],
    "piyg-5":["D01C8B","F1B6DA","F7F7F7","B8E186","4DAC26"],
    "piyg-6":["C51B7D","E9A3C9","FDE0EF","E6F5D0","A1D76A","4D9221"],
    "piyg-7":["C51B7D","E9A3C9","FDE0EF","F7F7F7","E6F5D0","A1D76A","4D9221"],
    "piyg-8":["C51B7D","DE77AE","F1B6DA","FDE0EF","E6F5D0","B8E186","7FBC41","4D9221"],
    "piyg-9":["C51B7D","DE77AE","F1B6DA","FDE0EF","F7F7F7","E6F5D0","B8E186","7FBC41","4D9221"],
    "piyg-10":["8E0152","C51B7D","DE77AE","F1B6DA","FDE0EF","E6F5D0","B8E186","7FBC41","4D9221","276419"],
    "piyg-11":["8E0152","C51B7D","DE77AE","F1B6DA","FDE0EF","F7F7F7","E6F5D0","B8E186","7FBC41","4D9221","276419"],
    "prgn-3":["AF8DC3","F7F7F7","7FBF7B"],
    "prgn-4":["7B3294","C2A5CF","A6DBA0","008837"],
    "prgn-5":["7B3294","C2A5CF","F7F7F7","A6DBA0","008837"],
    "prgn-6":["762A83","AF8DC3","E7D4E8","D9F0D3","7FBF7B","1B7837"],
    "prgn-7":["762A83","AF8DC3","E7D4E8","F7F7F7","D9F0D3","7FBF7B","1B7837"],
    "prgn-8":["762A83","9970AB","C2A5CF","E7D4E8","D9F0D3","A6DBA0","5AAE61","1B7837"],
    "prgn-9":["762A83","9970AB","C2A5CF","E7D4E8","F7F7F7","D9F0D3","A6DBA0","5AAE61","1B7837"],
    "prgn-10":["40004B","762A83","9970AB","C2A5CF","E7D4E8","D9F0D3","A6DBA0","5AAE61","1B7837","00441B"],
    "prgn-11":["40004B","762A83","9970AB","C2A5CF","E7D4E8","F7F7F7","D9F0D3","A6DBA0","5AAE61","1B7837","00441B"],
    "pubu-3":["ECE7F2","A6BDDB","2B8CBE"],
    "pubu-4":["F1EEF6","BDC9E1","74A9CF","0570B0"],
    "pubu-5":["F1EEF6","BDC9E1","74A9CF","2B8CBE","045A8D"],
    "pubu-6":["F1EEF6","D0D1E6","A6BDDB","74A9CF","2B8CBE","045A8D"],
    "pubu-7":["F1EEF6","D0D1E6","A6BDDB","74A9CF","3690C0","0570B0","034E7B"],
    "pubu-8":["FFF7FB","ECE7F2","D0D1E6","A6BDDB","74A9CF","3690C0","0570B0","034E7B"],
    "pubu-9":["FFF7FB","ECE7F2","D0D1E6","A6BDDB","74A9CF","3690C0","0570B0","045A8D","023858"],
    "pubugn-3":["ECE2F0","A6BDDB","1C9099"],
    "pubugn-4":["F6EFF7","BDC9E1","67A9CF","02818A"],
    "pubugn-5":["F6EFF7","BDC9E1","67A9CF","1C9099","016C59"],
    "pubugn-6":["F6EFF7","D0D1E6","A6BDDB","67A9CF","1C9099","016C59"],
    "pubugn-7":["F6EFF7","D0D1E6","A6BDDB","67A9CF","3690C0","02818A","016450"],
    "pubugn-8":["FFF7FB","ECE2F0","D0D1E6","A6BDDB","67A9CF","3690C0","02818A","016450"],
    "pubugn-9":["FFF7FB","ECE2F0","D0D1E6","A6BDDB","67A9CF","3690C0","02818A","016C59","014636"],
    "puor-3":["F1A340","F7F7F7","998EC3"],
    "puor-4":["E66101","FDB863","B2ABD2","5E3C99"],
    "puor-5":["E66101","FDB863","F7F7F7","B2ABD2","5E3C99"],
    "puor-6":["B35806","F1A340","FEE0B6","D8DAEB","998EC3","542788"],
    "puor-7":["B35806","F1A340","FEE0B6","F7F7F7","D8DAEB","998EC3","542788"],
    "puor-8":["B35806","E08214","FDB863","FEE0B6","D8DAEB","B2ABD2","8073AC","542788"],
    "puor-9":["B35806","E08214","FDB863","FEE0B6","F7F7F7","D8DAEB","B2ABD2","8073AC","542788"],
    "puor-10":["7F3B08","B35806","E08214","FDB863","FEE0B6","D8DAEB","B2ABD2","8073AC","542788","2D004B"],
    "puor-11":["7F3B08","B35806","E08214","FDB863","FEE0B6","F7F7F7","D8DAEB","B2ABD2","8073AC","542788","2D004B"],
    "purd-3":["E7E1EF","C994C7","DD1C77"],
    "purd-4":["F1EEF6","D7B5D8","DF65B0","CE1256"],
    "purd-5":["F1EEF6","D7B5D8","DF65B0","DD1C77","980043"],
    "purd-6":["F1EEF6","D4B9DA","C994C7","DF65B0","DD1C77","980043"],
    "purd-7":["F1EEF6","D4B9DA","C994C7","DF65B0","E7298A","CE1256","91003F"],
    "purd-8":["F7F4F9","E7E1EF","D4B9DA","C994C7","DF65B0","E7298A","CE1256","91003F"],
    "purd-9":["F7F4F9","E7E1EF","D4B9DA","C994C7","DF65B0","E7298A","CE1256","980043","67001F"],
    "purples-3":["EFEDF5","BCBDDC","756BB1"],
    "purples-4":["F2F0F7","CBC9E2","9E9AC8","6A51A3"],
    "purples-5":["F2F0F7","CBC9E2","9E9AC8","756BB1","54278F"],
    "purples-6":["F2F0F7","DADAEB","BCBDDC","9E9AC8","756BB1","54278F"],
    "purples-7":["F2F0F7","DADAEB","BCBDDC","9E9AC8","807DBA","6A51A3","4A1486"],
    "purples-8":["FCFBFD","EFEDF5","DADAEB","BCBDDC","9E9AC8","807DBA","6A51A3","4A1486"],
    "purples-9":["FCFBFD","EFEDF5","DADAEB","BCBDDC","9E9AC8","807DBA","6A51A3","54278F","3F007D"],
    "rdbu-3":["EF8A62","F7F7F7","67A9CF"],
    "rdbu-4":["CA0020","F4A582","92C5DE","0571B0"],
    "rdbu-5":["CA0020","F4A582","F7F7F7","92C5DE","0571B0"],
    "rdbu-6":["B2182B","EF8A62","FDDBC7","D1E5F0","67A9CF","2166AC"],
    "rdbu-7":["B2182B","EF8A62","FDDBC7","F7F7F7","D1E5F0","67A9CF","2166AC"],
    "rdbu-8":["B2182B","D6604D","F4A582","FDDBC7","D1E5F0","92C5DE","4393C3","2166AC"],
    "rdbu-9":["B2182B","D6604D","F4A582","FDDBC7","F7F7F7","D1E5F0","92C5DE","4393C3","2166AC"],
    "rdbu-10":["67001F","B2182B","D6604D","F4A582","FDDBC7","D1E5F0","92C5DE","4393C3","2166AC","053061"],
    "rdbu-11":["67001F","B2182B","D6604D","F4A582","FDDBC7","F7F7F7","D1E5F0","92C5DE","4393C3","2166AC","053061"],
    "rdgy-3":["EF8A62","FFFFFF","999999"],
    "rdgy-4":["CA0020","F4A582","BABABA","404040"],
    "rdgy-5":["CA0020","F4A582","FFFFFF","BABABA","404040"],
    "rdgy-6":["B2182B","EF8A62","FDDBC7","E0E0E0","999999","4D4D4D"],
    "rdgy-7":["B2182B","EF8A62","FDDBC7","FFFFFF","E0E0E0","999999","4D4D4D"],
    "rdgy-8":["B2182B","D6604D","F4A582","FDDBC7","E0E0E0","BABABA","878787","4D4D4D"],
    "rdgy-9":["B2182B","D6604D","F4A582","FDDBC7","FFFFFF","E0E0E0","BABABA","878787","4D4D4D"],
    "rdgy-10":["67001F","B2182B","D6604D","F4A582","FDDBC7","E0E0E0","BABABA","878787","4D4D4D","1A1A1A"],
    "rdgy-11":["67001F","B2182B","D6604D","F4A582","FDDBC7","FFFFFF","E0E0E0","BABABA","878787","4D4D4D","1A1A1A"],
    "rdpu-3":["FDE0DD","FA9FB5","C51B8A"],
    "rdpu-4":["FEEBE2","FBB4B9","F768A1","AE017E"],
    "rdpu-5":["FEEBE2","FBB4B9","F768A1","C51B8A","7A0177"],
    "rdpu-6":["FEEBE2","FCC5C0","FA9FB5","F768A1","C51B8A","7A0177"],
    "rdpu-7":["FEEBE2","FCC5C0","FA9FB5","F768A1","DD3497","AE017E","7A0177"],
    "rdpu-8":["FFF7F3","FDE0DD","FCC5C0","FA9FB5","F768A1","DD3497","AE017E","7A0177"],
    "rdpu-9":["FFF7F3","FDE0DD","FCC5C0","FA9FB5","F768A1","DD3497","AE017E","7A0177","49006A"],
    "reds-3":["FEE0D2","FC9272","DE2D26"],
    "reds-4":["FEE5D9","FCAE91","FB6A4A","CB181D"],
    "reds-5":["FEE5D9","FCAE91","FB6A4A","DE2D26","A50F15"],
    "reds-6":["FEE5D9","FCBBA1","FC9272","FB6A4A","DE2D26","A50F15"],
    "reds-7":["FEE5D9","FCBBA1","FC9272","FB6A4A","EF3B2C","CB181D","99000D"],
    "reds-8":["FFF5F0","FEE0D2","FCBBA1","FC9272","FB6A4A","EF3B2C","CB181D","99000D"],
    "reds-9":["FFF5F0","FEE0D2","FCBBA1","FC9272","FB6A4A","EF3B2C","CB181D","A50F15","67000D"],
    "rdylbu-3":["FC8D59","FFFFBF","91BFDB"],
    "rdylbu-4":["D7191C","FDAE61","ABD9E9","2C7BB6"],
    "rdylbu-5":["D7191C","FDAE61","FFFFBF","ABD9E9","2C7BB6"],
    "rdylbu-6":["D73027","FC8D59","FEE090","E0F3F8","91BFDB","4575B4"],
    "rdylbu-7":["D73027","FC8D59","FEE090","FFFFBF","E0F3F8","91BFDB","4575B4"],
    "rdylbu-8":["D73027","F46D43","FDAE61","FEE090","E0F3F8","ABD9E9","74ADD1","4575B4"],
    "rdylbu-9":["D73027","F46D43","FDAE61","FEE090","FFFFBF","E0F3F8","ABD9E9","74ADD1","4575B4"],
    "rdylbu-10":["A50026","D73027","F46D43","FDAE61","FEE090","E0F3F8","ABD9E9","74ADD1","4575B4","313695"],
    "rdylbu-11":["A50026","D73027","F46D43","FDAE61","FEE090","FFFFBF","E0F3F8","ABD9E9","74ADD1","4575B4","313695"],
    "rdylgn-3":["FC8D59","FFFFBF","91CF60"],
    "rdylgn-4":["D7191C","FDAE61","A6D96A","1A9641"],
    "rdylgn-5":["D7191C","FDAE61","FFFFBF","A6D96A","1A9641"],
    "rdylgn-6":["D73027","FC8D59","FEE08B","D9EF8B","91CF60","1A9850"],
    "rdylgn-7":["D73027","FC8D59","FEE08B","FFFFBF","D9EF8B","91CF60","1A9850"],
    "rdylgn-8":["D73027","F46D43","FDAE61","FEE08B","D9EF8B","A6D96A","66BD63","1A9850"],
    "rdylgn-9":["D73027","F46D43","FDAE61","FEE08B","FFFFBF","D9EF8B","A6D96A","66BD63","1A9850"],
    "rdylgn-10":["A50026","D73027","F46D43","FDAE61","FEE08B","D9EF8B","A6D96A","66BD63","1A9850","006837"],
    "rdylgn-11":["A50026","D73027","F46D43","FDAE61","FEE08B","FFFFBF","D9EF8B","A6D96A","66BD63","1A9850","006837"],
    "set1-3":["E41A1C","377EB8","4DAF4A"],
    "set1-4":["E41A1C","377EB8","4DAF4A","984EA3"],
    "set1-5":["E41A1C","377EB8","4DAF4A","984EA3","FF7F00"],
    "set1-6":["E41A1C","377EB8","4DAF4A","984EA3","FF7F00","FFFF33"],
    "set1-7":["E41A1C","377EB8","4DAF4A","984EA3","FF7F00","FFFF33","A65628"],
    "set1-8":["E41A1C","377EB8","4DAF4A","984EA3","FF7F00","FFFF33","A65628","F781BF"],
    "set1-9":["E41A1C","377EB8","4DAF4A","984EA3","FF7F00","FFFF33","A65628","F781BF","999999"],
    "set2-3":["66C2A5","FC8D62","8DA0CB"],
    "set2-4":["66C2A5","FC8D62","8DA0CB","E78AC3"],
    "set2-5":["66C2A5","FC8D62","8DA0CB","E78AC3","A6D854"],
    "set2-6":["66C2A5","FC8D62","8DA0CB","E78AC3","A6D854","FFD92F"],
    "set2-7":["66C2A5","FC8D62","8DA0CB","E78AC3","A6D854","FFD92F","E5C494"],
    "set2-8":["66C2A5","FC8D62","8DA0CB","E78AC3","A6D854","FFD92F","E5C494","B3B3B3"],
    "set3-3":["8DD3C7","FFFFB3","BEBADA"],
    "set3-4":["8DD3C7","FFFFB3","BEBADA","FB8072"],
    "set3-5":["8DD3C7","FFFFB3","BEBADA","FB8072","80B1D3"],
    "set3-6":["8DD3C7","FFFFB3","BEBADA","FB8072","80B1D3","FDB462"],
    "set3-7":["8DD3C7","FFFFB3","BEBADA","FB8072","80B1D3","FDB462","B3DE69"],
    "set3-8":["8DD3C7","FFFFB3","BEBADA","FB8072","80B1D3","FDB462","B3DE69","FCCDE5"],
    "set3-9":["8DD3C7","FFFFB3","BEBADA","FB8072","80B1D3","FDB462","B3DE69","FCCDE5","D9D9D9"],
    "set3-10":["8DD3C7","FFFFB3","BEBADA","FB8072","80B1D3","FDB462","B3DE69","FCCDE5","D9D9D9","BC80BD"],
    "set3-11":["8DD3C7","FFFFB3","BEBADA","FB8072","80B1D3","FDB462","B3DE69","FCCDE5","D9D9D9","BC80BD","CCEBC5"],
    "set3-12":["8DD3C7","FFFFB3","BEBADA","FB8072","80B1D3","FDB462","B3DE69","FCCDE5","D9D9D9","BC80BD","CCEBC5","FFED6F"],
    "spectral-3":["FC8D59","FFFFBF","99D594"],
    "spectral-4":["D7191C","FDAE61","ABDDA4","2B83BA"],
    "spectral-5":["D7191C","FDAE61","FFFFBF","ABDDA4","2B83BA"],
    "spectral-6":["D53E4F","FC8D59","FEE08B","E6F598","99D594","3288BD"],
    "spectral-7":["D53E4F","FC8D59","FEE08B","FFFFBF","E6F598","99D594","3288BD"],
    "spectral-8":["D53E4F","F46D43","FDAE61","FEE08B","E6F598","ABDDA4","66C2A5","3288BD"],
    "spectral-9":["D53E4F","F46D43","FDAE61","FEE08B","FFFFBF","E6F598","ABDDA4","66C2A5","3288BD"],
    "spectral-10":["9E0142","D53E4F","F46D43","FDAE61","FEE08B","E6F598","ABDDA4","66C2A5","3288BD","5E4FA2"],
    "spectral-11":["9E0142","D53E4F","F46D43","FDAE61","FEE08B","FFFFBF","E6F598","ABDDA4","66C2A5","3288BD","5E4FA2"],
    "ylgn-3":["F7FCB9","ADDD8E","31A354"],
    "ylgn-4":["FFFFCC","C2E699","78C679","238443"],
    "ylgn-5":["FFFFCC","C2E699","78C679","31A354","006837"],
    "ylgn-6":["FFFFCC","D9F0A3","ADDD8E","78C679","31A354","006837"],
    "ylgn-7":["FFFFCC","D9F0A3","ADDD8E","78C679","41AB5D","238443","005A32"],
    "ylgn-8":["FFFFE5","F7FCB9","D9F0A3","ADDD8E","78C679","41AB5D","238443","005A32"],
    "ylgn-9":["FFFFE5","F7FCB9","D9F0A3","ADDD8E","78C679","41AB5D","238443","006837","004529"],
    "ylgnbu-3":["EDF8B1","7FCDBB","2C7FB8"],
    "ylgnbu-4":["FFFFCC","A1DAB4","41B6C4","225EA8"],
    "ylgnbu-5":["FFFFCC","A1DAB4","41B6C4","2C7FB8","253494"],
    "ylgnbu-6":["FFFFCC","C7E9B4","7FCDBB","41B6C4","2C7FB8","253494"],
    "ylgnbu-7":["FFFFCC","C7E9B4","7FCDBB","41B6C4","1D91C0","225EA8","0C2C84"],
    "ylgnbu-8":["FFFFD9","EDF8B1","C7E9B4","7FCDBB","41B6C4","1D91C0","225EA8","0C2C84"],
    "ylgnbu-9":["FFFFD9","EDF8B1","C7E9B4","7FCDBB","41B6C4","1D91C0","225EA8","253494","081D58"],
    "ylorbr-3":["FFF7BC","FEC44F","D95F0E"],
    "ylorbr-4":["FFFFD4","FED98E","FE9929","CC4C02"],
    "ylorbr-5":["FFFFD4","FED98E","FE9929","D95F0E","993404"],
    "ylorbr-6":["FFFFD4","FEE391","FEC44F","FE9929","D95F0E","993404"],
    "ylorbr-7":["FFFFD4","FEE391","FEC44F","FE9929","EC7014","CC4C02","8C2D04"],
    "ylorbr-8":["FFFFE5","FFF7BC","FEE391","FEC44F","FE9929","EC7014","CC4C02","8C2D04"],
    "ylorbr-9":["FFFFE5","FFF7BC","FEE391","FEC44F","FE9929","EC7014","CC4C02","993404","662506"],
    "ylorrd-3":["FFEDA0","FEB24C","F03B20"],
    "ylorrd-4":["FFFFB2","FECC5C","FD8D3C","E31A1C"],
    "ylorrd-5":["FFFFB2","FECC5C","FD8D3C","F03B20","BD0026"],
    "ylorrd-6":["FFFFB2","FED976","FEB24C","FD8D3C","F03B20","BD0026"],
    "ylorrd-7":["FFFFB2","FED976","FEB24C","FD8D3C","FC4E2A","E31A1C","B10026"],
    "ylorrd-8":["FFFFCC","FFEDA0","FED976","FEB24C","FD8D3C","FC4E2A","E31A1C","B10026"],
    "ylorrd-9":["FFFFCC","FFEDA0","FED976","FEB24C","FD8D3C","FC4E2A","E31A1C","BD0026","800026"]
    }
}());
(function(){
    MF.util.namespace("MF.map.bing");
    MF.map.bing.Manager=function(mapDiv,options){
        if(!options||!options.credentials){
            throw'The Bing map manager requires at least the "credentials" option to be defined.'
            }else{
            if(!Microsoft||!Microsoft.Maps){
                throw"The Bing map manager requires Microsoft.Maps to be loaded."
                }
            }
        var that=MF.map.base.Manager(mapDiv,options);
    that.type="Bing";
    var lng=that.getAndRemove("lngCenter",-110),lat=that.getAndRemove("latCenter",38),mapType=that.getAndRemove("mapType","road"),loc=new Microsoft.Maps.Location(lat,lng);
    that.defaultTo("center",loc);
    that.defaultTo("zoom",2);
    that.defaultTo("bingMapTypeId",Microsoft.Maps.MapTypeId[mapType]);
    that.map=new Microsoft.Maps.Map(mapDiv,that.clientOptions);
    var attributionDiv=document.createElement("div");
    attributionDiv.className="bing-attribution";
    attributionDiv.innerHTML='<div style="position: relative;"><div class="bg">Map data &copy; 2011 Urban Mapping and partners</div><div class="fg">Map data &copy; 2011 <a href="http://developer.urbanmapping.com/content/Mapfluence-Attribution-and-Copyright-Information">Urban Mapping and partners</a></div><div>';
    mapDiv.insertBefore(attributionDiv,null);
    that.adapter=MF.map.bing.Adapter();
    that.getOptions=function(){
        var latest={},center=that.map.getCenter(),sty;
        MF.util.shallowCopy(latest,options);
        latest.zoom=that.map.getZoom();
        latest.latCenter=center.latitude;
        latest.lngCenter=center.longitude;
        sty=that.map.getMapTypeId();
        delete latest.mapType;
        latest.mapTypeId=sty;
        return latest
        };
        
    that.destroy=function(){
        that.map.dispose();
        that.map=null;
        that.layers=[]
        };
        
    that.addLayer=function(layer){
        var bOptions={};
        
        var bLayer=that.adapter.adaptLayer(layer,bOptions);
        that.layers.push({
            mfLayer:layer,
            clientLayer:bLayer
        });
        that.map.entities.push(bLayer);
        return bLayer
        };
        
    that.removeLayer=function(layer){
        for(var i=0;i<that.layers.length;i+=1){
            if(that.layers[i].mfLayer==layer){
                that.layers.splice(i,1);
                that.map.entities.removeAt(i)
                }
            }
        };
    
that.refreshLayer=function(layer){
    that.removeLayer(layer);
    that.addLayer(layer)
    };
    
that.listenMouseMove=function(callback){
    Microsoft.Maps.Events.addHandler(map,"click",callback)
    };
    
return that
}
}());
(function(){
    MF.util.namespace("MF.map.bing");
    MF.map.bing.Adapter=function(secret){
        var secret=secret||{},that=MF.map.base.Adapter(secret);
        that.adaptLayer=function(mfLayer){
            var getTilePath=function(tile){
                var tileOpts={
                    x:tile.x,
                    y:tile.y,
                    z:tile.levelOfDetail,
                    tileType:"bing"
                };
                
                return mfLayer.getTileUrl(tileOpts)
                };
                
            var tileSource=new Microsoft.Maps.TileSource({
                uriConstructor:getTilePath
            });
            var tileLayer=new Microsoft.Maps.TileLayer({
                mercator:tileSource,
                opacity:1
            });
            return tileLayer
            };
            
        return that
        }
    }());
(function(){
    MF.util.namespace("MF.map.google");
    MF.map.google.Manager=function(mapDiv,options){
        var that=MF.map.base.Manager(mapDiv,options);
        that.type="Google";
        that.layers=[];
        var lng=that.getAndRemove("lngCenter",-110);
        var lat=that.getAndRemove("latCenter",38);
        var mapType=that.getAndRemove("mapType",google.maps.MapTypeId.ROADMAP);
        that.defaultTo("zoom",2);
        that.defaultTo("mapTypeId",mapType);
        that.clientOptions.center=new google.maps.LatLng(lat,lng);
        that.map=new google.maps.Map(mapDiv,that.clientOptions);
        var attributionDiv=document.createElement("div");
        attributionDiv.className="google-attribution";
        attributionDiv.innerHTML='Map data &copy; 2011 <a href="http://developer.urbanmapping.com/content/Mapfluence-Attribution-and-Copyright-Information">Urban Mapping and partners</a>';
        that.map.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push(attributionDiv);
        that.adapter=MF.map.google.Adapter();
        that.getOptions=function(){
            var opts={},center=that.map.getCenter();
            opts.zoom=that.map.getZoom();
            opts.latCenter=center.lat();
            opts.lngCenter=center.lng();
            opts.mapType=that.map.getMapTypeId();
            return opts
            };
            
        that.addLayer=function(layer){
            var gOptions={};
            
            var gLayer=that.adapter.adaptLayer(layer,gOptions);
            that.map.overlayMapTypes.push(gLayer);
            that.layers.push({
                mfLayer:layer,
                clientLayer:gLayer
            });
            return gLayer
            };
            
        that.removeLayer=function(layer){
            var layerColl=that.layers;
            for(var i=0;i<layerColl.length;i++){
                if(layerColl[i].mfLayer==layer){
                    var gLayerToMatch=layerColl[i].clientLayer;
                    var map=that.map;
                    that.map.overlayMapTypes.forEach(function(gLayer,index){
                        if(gLayer==gLayerToMatch){
                            map.overlayMapTypes.removeAt(index);
                            layerColl.splice(i,1);
                            return
                        }
                    })
                }
            }
        };
    
that.refreshLayer=function(layer){
    that.removeLayer(layer);
    that.addLayer(layer)
    };
    
return that
}
}());
(function(){
    MF.util.namespace("MF.map.google");
    MF.map.google.Adapter=function(secret){
        var secret=secret||{},that=MF.map.base.Adapter(secret);
        that.adaptLayer=function(mfLayer){
            var mfImageMap={
                getTileUrl:function(coord,zoom){
                    var width=Math.pow(2,zoom);
                    var modX=coord.x%width;
                    if(modX<0){
                        modX+=width
                        }
                        if(coord.y<0||coord.y>=width){
                        return null
                        }
                        var opts={
                        x:modX,
                        y:coord.y,
                        z:zoom,
                        tileType:"g"
                    };
                    
                    return mfLayer.getTileUrl(opts)
                    },
                tileSize:new google.maps.Size(256,256),
                isPng:true
            };
            
            var googleLayer=new google.maps.ImageMapType(mfImageMap);
            return googleLayer
            };
            
        return that
        }
    }());
(function(){
    MF.util.namespace("MF.map.base");
    MF.map.base.Manager=function(mapDiv,options){
        var that={};
        
        that.map=null;
        that.type="Base";
        that.adapter=null;
        that.layers=[];
        that.clientOptions={};
        
        MF.util.shallowCopy(that.clientOptions,options);
        that.refreshLayer=function(layer){
            throw"refreshLayer not implemented in MF.map.base.Manager - implement in subclass"
            };
            
        that.destroy=function(){
            that.map=null
            };
            
        that.addLayer=function(layer){
            throw"addLayer not implemented in MF.map.base.Manager - implement in subclass"
            };
            
        that.removeLayer=function(layer){
            throw"removeLayer not implemented in MF.map.base.Manager - implement in subclass"
            };
            
        that.getOptions=function(){
            throw"getOptions not implemented in MF.map.base.Manager - implement in subclass"
            };
            
        that.getPermalink=function(){
            var index=location.href.indexOf("?"),url;
            if(index===-1){
                index=location.href.length
                }
                url=location.href.slice(0,index);
            url+="?"+MF.util.encodeMapOptionsForQuery(mapDiv.id,that.getOptions());
            return url
            };
            
        that.getAndRemove=function(propName,dfault){
            var prop;
            if(that.clientOptions.hasOwnProperty(propName)){
                prop=that.clientOptions[propName];
                delete that.clientOptions[propName];
                return prop
                }
                return dfault
            };
            
        that.defaultTo=function(propName,dfault){
            if(!that.clientOptions.hasOwnProperty(propName)){
                that.clientOptions[propName]=dfault
                }
                return that.clientOptions[propName]
            };
            
        that.getMap=function(){
            return that.map
            };
            
        return that
        }
    }());
(function(){
    MF.util.namespace("MF.map.base");
    MF.map.base.Adapter=function(secret){
        var secret=secret||{},that={};
        
        that.adaptLayer=function(layer,options){
            throw"adaptLayer not implemented for this adapter"
            };
            
        return that
        }
    }());
(function(){
    MF.util.namespace("MF.map.openlayers");
    MF.map.openlayers.Manager=function(mapDiv,options){
        MF.map.openlayers.initialize();
        var options=options||{};
        
        var that=MF.map.base.Manager(mapDiv,options);
        that.type="Mapfluence";
        that.hasActiveVectors=false;
        var activeLayers=[];
        var hiliteCtrl,selectCtrl;
        that.map=null;
        that.layers=[];
        var mfLayerOptions={
            sphericalMercator:true,
            layername:"",
            isBaseLayer:false
        };
        
        var lng=(options.hasOwnProperty("lngCenter"))?options.lngCenter:-110;
        var lat=(options.hasOwnProperty("latCenter"))?options.latCenter:38;
        var zoom=(options.hasOwnProperty("zoom"))?options.zoom:2;
        var center=new OpenLayers.LonLat(lng,lat);
        center.transform(MF.map.openlayers.Projections.geographic,MF.map.openlayers.Projections.mercator);
        var maxExtents=new OpenLayers.Bounds(-125,20,-90,55);
        maxExtents.transform(MF.map.openlayers.Projections.geographic,MF.map.openlayers.Projections.mercator);
        var openLayersOptions={
            projection:MF.map.openlayers.Projections.mercator,
            displayProjection:MF.map.openlayers.Projections.geographic,
            units:"m",
            numZoomLevels:20,
            theme:"http://static.mapfluence.com/lib/openlayers-theme/css/style.css",
            controls:[new OpenLayers.Control.Navigation(),new OpenLayers.Control.Attribution(),new MF.PanZoomBar(),new OpenLayers.Control.ScaleLine(),new OpenLayers.Control.LayerSwitcher()]
            };
            
        that.map=new OpenLayers.Map(mapDiv,openLayersOptions);
        that.adapter=MF.map.openlayers.Adapter();
        var mfBaseLayer=MF.layer.tile.Composite({
            layers:[MF.layer.tile.Named({
                from:MF.layer.tile.Named.Layers.MF_LAND
                }),MF.layer.tile.Named({
                from:MF.layer.tile.Named.Layers.MF_ROADS
                })]
            });
        var mfBaseLayerOpts={
            attribution:'Map data &copy; 2010 <a href="http://developer.urbanmapping.com/content/Mapfluence-Attribution-and-Copyright-Information">Urban Mapping and partners</a><br/><a href="http://www.openstreetmap.org/">OpenStreetMap</a> and contributors <a href="http://creativecomons.org/licenses/by-sa/2.0/">cc by sa</a>',
            isBaseLayer:true
        };
        
        that.addVectorControls=function(opts){
            if(!that.hasActiveVectors){
                hiliteCtrl=new OpenLayers.Control.SelectFeature([],{
                    toggle:true,
                    renderIntent:"temporary",
                    highlightOnly:true,
                    hover:true
                });
                selectCtrl=new OpenLayers.Control.SelectFeature([],{
                    clickout:true,
                    toggle:true,
                    multiple:false,
                    hover:false,
                    toggleKey:"ctrlKey",
                    multipleKey:"shiftKey",
                    box:false
                });
                that.map.addControls([hiliteCtrl,selectCtrl]);
                that.toggleVectorControls(true);
                that.hasActiveVectors=true
                }else{
                MF.util.log.log("MF.map.openlayers.Manager has vector controls already loaded")
                }
            };
        
    that.removeVectorControls=function(){
        that.map.removeControl(hiliteCtrl);
        that.map.removeControl(selectCtrl);
        that.hasActiveVectors=false
        };
        
    that.toggleVectorControls=function(isOn){
        var activate=isOn||false;
        if(activate){
            hiliteCtrl.activate();
            selectCtrl.activate()
            }else{
            hiliteCtrl.deactivate();
            selectCtrl.deactivate()
            }
        };
    
var registerSelectableLayer=function(vectorOl){
    activeLayers.push(vectorOl);
    hiliteCtrl.setLayer(activeLayers);
    selectCtrl.setLayer(activeLayers)
    };
    
that.destroy=function(){
    that.map.destroy();
    that.map=null;
    that.layers=[]
    };
    
that.getOptions=function(){
    var options={};
    
    options.zoom=that.map.getZoom();
    var center=that.map.getCenter();
    center.transform(MF.map.openlayers.Projections.mercator,MF.map.openlayers.Projections.geographic);
    options.latCenter=center.lat;
    options.lngCenter=center.lon;
    return options
    };
    
that.addLayer=function(layer,options){
    var olOptions=options||{
        isBaseLayer:false
    },olLayer;
    if(layer.layerType==="vector"){
        olLayer=that.adapter.adaptVectorLayer(layer,olOptions);
        if(that.hasActiveVectors&&layer.isSelectable){
            registerSelectableLayer(olLayer)
            }
        }else{
    olLayer=that.adapter.adaptLayer(layer,olOptions)
    }
    that.map.addLayer(olLayer);
    that.layers.push({
    mfLayer:layer,
    clientLayer:olLayer
});
return olLayer
};

that.removeLayer=function(layer){
    var layerColl=that.layers;
    for(var i=0;i<layerColl.length;i++){
        if(layerColl[i].mfLayer==layer){
            that.map.removeLayer(layerColl[i].clientLayer);
            layerColl.splice(i,1)
            }
        }
    };

that.refreshLayer=function(layer){
    for(var i=0;i<that.layers.length;i++){
        if(that.layers[i].mfLayer==layer){
            that.layers[i].clientLayer.redraw()
            }
        }
    };

var olBaseLayer=that.adapter.adaptLayer(mfBaseLayer,mfBaseLayerOpts);
that.map.addLayer(olBaseLayer);
that.map.setCenter(center,zoom);
if(options.hasOwnProperty("activeVectors")){
    if(options.activeVectors){
        that.addVectorControls()
        }
    }
return that
}
}());
(function(){
    MF.util.namespace("MF.map.openlayers");
    MF.map.openlayers.Adapter=function(secret){
        var secret=secret||{},initializeLayer,that=MF.map.base.Adapter();
        initializeLayer=function(){
            if(MF.map.openlayers.Layer!==undefined){
                return
            }
            MF.map.openlayers.Layer=OpenLayers.Class(OpenLayers.Layer.XYZ,{
                initialize:function(name,fnGetTileUrl,options){
                    if(options&&options.sphericalMercator||this.sphericalMercator){
                        options=OpenLayers.Util.extend({
                            maxExtent:new OpenLayers.Bounds(-128*156543.0339,-128*156543.0339,128*156543.0339,128*156543.0339),
                            maxResolution:156543.0339,
                            numZoomLevels:19,
                            units:"m",
                            projection:"EPSG:900913"
                        },options)
                        }
                        this.fnGetTileUrl=fnGetTileUrl;
                    url="";
                    name=name||this.name;
                    var newArguments=[name,url,{},options];
                    OpenLayers.Layer.Grid.prototype.initialize.apply(this,newArguments)
                    },
                getURL:function(bounds){
                    var res=this.map.getResolution();
                    var x=Math.round((bounds.left-this.maxExtent.left)/(res*this.tileSize.w));
                    var y=Math.round((this.maxExtent.top-bounds.top)/(res*this.tileSize.h));
                    var z=this.map.getZoom();
                    var url=this.fnGetTileUrl(x,y,z);
                    return url
                    },
                CLASS_NAME:"MF.map.openlayers.Layer"
            })
            };
            
        that.adaptLayer=function(mfLayer,options){
            if(!options){
                options={}
            }
            if(!options.layername){
            options.layername="MF Layer"
            }
            options.isBaseLayer=options.isBaseLayer!==false;
        options.sphericalMercator=true;
        var getTileUrl=function(x,y,zoom){
            var opts={
                x:x,
                y:y,
                z:zoom,
                tileType:"ol"
            };
            
            return mfLayer.getTileUrl(opts)
            };
            
        initializeLayer();
        var olLayer=new MF.map.openlayers.Layer(options.layername,getTileUrl,options);
        return olLayer
        };
        
    that.adaptVectorLayer=function(mfvLayer,options){
        var options=options||{};
        
        if(!options.layername){
            options.layername="Vector Layer"
            }
            options.isBaseLayer=false;
        options.maxResolution=156543.0339/Math.pow(2,mfvLayer.get("min_zoom"));
        options.minResolution=156543.0339/Math.pow(2,mfvLayer.get("max_zoom"));
        var sq=mfvLayer.getQuery();
        var olVectorLayer=new MF.map.openlayers.VectorLayer(options.layername,sq,options);
        return olVectorLayer
        };
        
    return that
    }
}());
(function(){
    MF.util.namespace("MF.map.openlayers");
    MF.map.openlayers.Control=function(){
        return{
            ZoomPanelNoMaxExtent:function(){
                var cls=OpenLayers.Class(OpenLayers.Control.Panel,{
                    initialize:function(options){
                        OpenLayers.Control.Panel.prototype.initialize.apply(this,[options]);
                        this.addControls([new OpenLayers.Control.ZoomIn(),new OpenLayers.Control.ZoomOut(),])
                        },
                    CLASS_NAME:"OpenLayers.Control.ZoomPanelNoMaxExtent"
                });
                return new cls(arguments)
                }
            }
    }
}());
(function(){
    MF.util.namespace("MF.map.openlayers");
    MF.map.openlayers.initProtocol=function(){
        MF.map.openlayers.Protocol=OpenLayers.Class(OpenLayers.Protocol,{
            read:function(options){
                OpenLayers.Protocol.prototype.read.apply(this,arguments);
                options=OpenLayers.Util.applyDefaults(options,this.options);
                var query=options.query;
                query.set("format","geojson");
                if(options.filter){
                    query=this.filterToParams(options.filter,query)
                    }
                    var resp=new OpenLayers.Protocol.Response({
                    requestType:"read"
                });
                var cb=this.handleResponse;
                query.execute(OpenLayers.Function.bind(function(data){
                    cb.apply(this,[data,resp,options])
                    },this));
                return resp
                },
            handleResponse:function(data,resp,options){
                if(options.callback){
                    resp.features=this.format.read(data);
                    options.callback.call(options.scope,resp)
                    }
                },
        filterToParams:function(filter,query){
            var clone=new query.constructor(query);
            if(MF.util.typeOf(clone.where)==="array"){
                clone.where=new Array(clone.where)
                }else{
                if(MF.util.typeOf(clone.where)==="string"){
                    clone.where=[clone.where]
                    }else{
                    clone.where=[]
                    }
                }
            var className=filter.CLASS_NAME;
        var filterType=className.substring(className.lastIndexOf(".")+1);
            switch(filterType){
            case"Spatial":
                switch(filter.type){
                case OpenLayers.Filter.Spatial.BBOX:
                    var mfBbox=MF.query.GeoFilter({
                    geometry:"BBOX("+filter.value.toBBOX()+")",
                    operator:"intersects"
                });
                clone.where.push(mfBbox);
                    break;
                case OpenLayers.Filter.Spatial.DWITHIN:
                    params.tolerance=filter.distance;
                case OpenLayers.Filter.Spatial.WITHIN:
                    params.lon=filter.value.x;
                    params.lat=filter.value.y;
                    break;
                default:
                    OpenLayers.Console.warn("Unknown spatial filter type "+filter.type)
                    }
                    break;
            case"Comparison":
                var op=OpenLayers.Protocol.HTTP.COMP_TYPE_TO_OP_STR[filter.type];
                if(op!==undefined){
                var value=filter.value;
                if(filter.type==OpenLayers.Filter.Comparison.LIKE){
                    value=this.regex2value(value);
                    if(this.wildcarded){
                        value="%"+value+"%"
                        }
                    }
                params[filter.property+"__"+op]=value;
            params.queryable=params.queryable||[];
            params.queryable.push(filter.property)
                }else{
                OpenLayers.Console.warn("Unknown comparison filter type "+filter.type)
                }
                break;
        case"Logical":
            if(filter.type===OpenLayers.Filter.Logical.AND){
            for(var i=0,len=filter.filters.length;i<len;i++){
                params=this.filterToParams(filter.filters[i],params)
                }
            }else{
            OpenLayers.Console.warn("Unsupported logical filter type "+filter.type)
            }
            break;
        default:
            OpenLayers.Console.warn("Unknown filter type "+filterType)
            }
            return clone
    },
CLASS_NAME:"MF.map.openlayers.Protocol"
});
(function(){
    var o=OpenLayers.Protocol.HTTP.COMP_TYPE_TO_OP_STR={};
    
    o[OpenLayers.Filter.Comparison.EQUAL_TO]="eq";
    o[OpenLayers.Filter.Comparison.NOT_EQUAL_TO]="ne";
    o[OpenLayers.Filter.Comparison.LESS_THAN]="lt";
    o[OpenLayers.Filter.Comparison.LESS_THAN_OR_EQUAL_TO]="lte";
    o[OpenLayers.Filter.Comparison.GREATER_THAN]="gt";
    o[OpenLayers.Filter.Comparison.GREATER_THAN_OR_EQUAL_TO]="gte";
    o[OpenLayers.Filter.Comparison.LIKE]="ilike"
    }())
}
}());
(function(){
    MF.util.namespace("MF.map.openlayers");
    MF.map.openlayers.initPanZoomBar=function(){
        MF.PanZoomBar=OpenLayers.Class(MF.PanZoom,{
            zoomStopWidth:28,
            zoomStopHeight:9,
            slider:null,
            sliderEvents:null,
            zoombarDiv:null,
            divEvents:null,
            zoomWorldIcon:false,
            forceFixedZoomLevel:false,
            mouseDragStart:null,
            zoomStart:null,
            initialize:function(){
                OpenLayers.Control.PanZoom.prototype.initialize.apply(this,arguments)
                },
            destroy:function(){
                this._removeZoomBar();
                this.map.events.un({
                    changebaselayer:this.redraw,
                    scope:this
                });
                OpenLayers.Control.PanZoom.prototype.destroy.apply(this,arguments);
                delete this.mouseDragStart;
                delete this.zoomStart
                },
            setMap:function(map){
                OpenLayers.Control.PanZoom.prototype.setMap.apply(this,arguments);
                this.map.events.register("changebaselayer",this,this.redraw)
                },
            redraw:function(){
                if(this.div!=null){
                    this.removeButtons();
                    this._removeZoomBar()
                    }
                    this.draw()
                },
            draw:function(px){
                OpenLayers.Control.prototype.draw.apply(this,arguments);
                px=this.position.clone();
                this.buttons=[];
                var nsSize=new OpenLayers.Size(34,24);
                var ewSize=new OpenLayers.Size(24,34);
                var zoomSize=new OpenLayers.Size(28,24);
                var zoomPixel=new OpenLayers.Pixel(px.x+10,px.y+54);
                var discSize=new OpenLayers.Size(48,48);
                this._addButton("pandisc","pan-disc.png",px,discSize);
                this._addButton("zoomin","zoom-plus-mini.png",zoomPixel,zoomSize);
                var centered=this._addZoomBar(zoomPixel.add(0,zoomSize.h));
                this._addButton("zoomout","zoom-minus-mini.png",centered,zoomSize);
                return this.div
                },
            _addZoomBar:function(centered){
                var imgLocation=OpenLayers.Util.getImagesLocation();
                var id=this.id+"_"+this.map.id;
                var zoomsToEnd=this.map.getNumZoomLevels()-1-this.map.getZoom();
                var slider=OpenLayers.Util.createAlphaImageDiv(id,centered.add(5,zoomsToEnd*this.zoomStopHeight),new OpenLayers.Size(18,9),imgLocation+"slider.png","absolute");
                this.slider=slider;
                this.sliderEvents=new OpenLayers.Events(this,slider,null,true,{
                    includeXY:true
                });
                this.sliderEvents.on({
                    mousedown:this.zoomBarDown,
                    mousemove:this.zoomBarDrag,
                    mouseup:this.zoomBarUp,
                    dblclick:this.doubleClick,
                    click:this.doubleClick
                    });
                var sz=new OpenLayers.Size();
                sz.h=this.zoomStopHeight*this.map.getNumZoomLevels();
                sz.w=this.zoomStopWidth;
                var div=null;
                if(OpenLayers.Util.alphaHack()){
                    var id=this.id+"_"+this.map.id;
                    div=OpenLayers.Util.createAlphaImageDiv(id,centered,new OpenLayers.Size(sz.w,this.zoomStopHeight),imgLocation+"zoombar.png","absolute",null,"crop");
                    div.style.height=sz.h+"px"
                    }else{
                    div=OpenLayers.Util.createDiv("OpenLayers_Control_PanZoomBar_Zoombar"+this.map.id,centered,sz,imgLocation+"zoombar2.png")
                    }
                    this.zoombarDiv=div;
                this.divEvents=new OpenLayers.Events(this,div,null,true,{
                    includeXY:true
                });
                this.divEvents.on({
                    mousedown:this.divClick,
                    mousemove:this.passEventToSlider,
                    dblclick:this.doubleClick,
                    click:this.doubleClick
                    });
                this.div.appendChild(div);
                this.startTop=parseInt(div.style.top);
                this.div.appendChild(slider);
                this.map.events.register("zoomend",this,this.moveZoomBar);
                centered=centered.add(0,this.zoomStopHeight*this.map.getNumZoomLevels());
                return centered
                },
            _removeZoomBar:function(){
                this.sliderEvents.un({
                    mousedown:this.zoomBarDown,
                    mousemove:this.zoomBarDrag,
                    mouseup:this.zoomBarUp,
                    dblclick:this.doubleClick,
                    click:this.doubleClick
                    });
                this.sliderEvents.destroy();
                this.divEvents.un({
                    mousedown:this.divClick,
                    mousemove:this.passEventToSlider,
                    dblclick:this.doubleClick,
                    click:this.doubleClick
                    });
                this.divEvents.destroy();
                this.div.removeChild(this.zoombarDiv);
                this.zoombarDiv=null;
                this.div.removeChild(this.slider);
                this.slider=null;
                this.map.events.unregister("zoomend",this,this.moveZoomBar)
                },
            passEventToSlider:function(evt){
                this.sliderEvents.handleBrowserEvent(evt)
                },
            divClick:function(evt){
                if(!OpenLayers.Event.isLeftClick(evt)){
                    return
                }
                var levels=evt.xy.y/this.zoomStopHeight;
                if(this.forceFixedZoomLevel||!this.map.fractionalZoom){
                    levels=Math.floor(levels)
                    }
                    var zoom=(this.map.getNumZoomLevels()-1)-levels;
                zoom=Math.min(Math.max(zoom,0),this.map.getNumZoomLevels()-1);
                this.map.zoomTo(zoom);
                OpenLayers.Event.stop(evt)
                },
            zoomBarDown:function(evt){
                if(!OpenLayers.Event.isLeftClick(evt)){
                    return
                }
                this.map.events.on({
                    mousemove:this.passEventToSlider,
                    mouseup:this.passEventToSlider,
                    scope:this
                });
                this.mouseDragStart=evt.xy.clone();
                this.zoomStart=evt.xy.clone();
                this.div.style.cursor="move";
                this.zoombarDiv.offsets=null;
                OpenLayers.Event.stop(evt)
                },
            zoomBarDrag:function(evt){
                if(this.mouseDragStart!=null){
                    var deltaY=this.mouseDragStart.y-evt.xy.y;
                    var offsets=OpenLayers.Util.pagePosition(this.zoombarDiv);
                    if((evt.clientY-offsets[1])>0&&(evt.clientY-offsets[1])<parseInt(this.zoombarDiv.style.height)-2){
                        var newTop=parseInt(this.slider.style.top)-deltaY;
                        this.slider.style.top=newTop+"px";
                        this.mouseDragStart=evt.xy.clone()
                        }
                        OpenLayers.Event.stop(evt)
                    }
                },
        zoomBarUp:function(evt){
            if(!OpenLayers.Event.isLeftClick(evt)){
                return
            }
            if(this.mouseDragStart){
                this.div.style.cursor="";
                this.map.events.un({
                    mouseup:this.passEventToSlider,
                    mousemove:this.passEventToSlider,
                    scope:this
                });
                var deltaY=this.zoomStart.y-evt.xy.y;
                var zoomLevel=this.map.zoom;
                if(!this.forceFixedZoomLevel&&this.map.fractionalZoom){
                    zoomLevel+=deltaY/this.zoomStopHeight;
                    zoomLevel=Math.min(Math.max(zoomLevel,0),this.map.getNumZoomLevels()-1)
                    }else{
                    zoomLevel+=Math.round(deltaY/this.zoomStopHeight)
                    }
                    this.map.zoomTo(zoomLevel);
                this.mouseDragStart=null;
                this.zoomStart=null;
                OpenLayers.Event.stop(evt)
                }
            },
        moveZoomBar:function(){
            var newTop=((this.map.getNumZoomLevels()-1)-this.map.getZoom())*this.zoomStopHeight+this.startTop+1;
            this.slider.style.top=newTop+"px"
            },
        CLASS_NAME:"MF.PanZoomBar"
    })
}
}());
(function(){
    MF.util.namespace("MF.map.openlayers");
    MF.map.openlayers.initialize=function(){
        if(this.inited===undefined){
            OpenLayers.ImgPath="http://static.mapfluence.com/lib/openlayers-theme/img/mf1/";
            MF.map.openlayers.initPanZoom();
            MF.map.openlayers.initPanZoomBar();
            MF.map.openlayers.initProtocol();
            MF.map.openlayers.Projections={
                geographic:new OpenLayers.Projection("EPSG:4326"),
                mercator:new OpenLayers.Projection("EPSG:900913")
                };
                
            this.inited=true
            }
        }
}());
(function(){
    MF.util.namespace("MF.map.openlayers");
    MF.map.openlayers.initVectorLayer=function(){
        MF.map.openlayers.VectorLayer=OpenLayers.Class(OpenLayers.Layer.Vector,{
            loaded:false,
            formatOptions:null,
            style:null,
            initialize:function(name,sq,options){
                options.projection=MF.map.openlayers.Projections.geographic;
                options.strategies=[new OpenLayers.Strategy.Fixed()];
                var protocol=new MF.map.openlayers.Protocol({
                    query:sq,
                    format:new MF.map.openlayers.GeoJSON()
                    });
                if(!(options.styleMap)){
                    options.styleMap=new OpenLayers.StyleMap({
                        "default":MF.map.openlayers.Styles["default"],
                        temporary:MF.map.openlayers.Styles.highlight,
                        select:MF.map.openlayers.Styles.select
                        })
                    }
                    options.protocol=protocol;
                var newArguments=[];
                newArguments.push(name,options);
                OpenLayers.Layer.Vector.prototype.initialize.apply(this,newArguments)
                },
            CLASS_NAME:"MF.map.openlayers.VectorLayer"
        });
        MF.map.openlayers.Styles={
            "default":new OpenLayers.Style({
                pointRadius:6,
                fillColor:"#99CC99",
                fillOpacity:0.5,
                strokeColor:"#99CC99",
                strokeWidth:2,
                strokeOpacity:0.75,
                graphicName:"square",
                graphicTitle:"${name}",
                cursor:"pointer"
            }),
            highlight:new OpenLayers.Style({
                pointRadius:8,
                fillColor:" #FF6666",
                strokeColor:" #FF6666"
            }),
            select:new OpenLayers.Style({
                pointRadius:6,
                fillColor:"#FF0099",
                fillOpacity:0.75,
                strokeColor:"#FF0099",
                strokeOpacity:1
            })
            }
        }
}());
(function(){
    MF.util.namespace("MF.map.openlayers");
    MF.map.openlayers.initPanZoom=function(){
        MF.PanZoom=OpenLayers.Class(OpenLayers.Control,{
            slideFactor:50,
            slideRatio:null,
            buttons:null,
            position:null,
            initialize:function(options){
                this.position=new OpenLayers.Pixel(OpenLayers.Control.PanZoom.X,OpenLayers.Control.PanZoom.Y);
                OpenLayers.Control.prototype.initialize.apply(this,arguments)
                },
            destroy:function(){
                OpenLayers.Control.prototype.destroy.apply(this,arguments);
                this.removeButtons();
                this.buttons=null;
                this.position=null
                },
            draw:function(px){
                OpenLayers.Control.prototype.draw.apply(this,arguments);
                px=this.position;
                this.buttons=[];
                var nsSize=new OpenLayers.Size(34,24);
                var ewSize=new OpenLayers.Size(24,34);
                var zoomSize=new OpenLayers.Size(28,24);
                var discSize=new OpenLayers.Size(48,48);
                var zoomPixel=new OpenLayers.Pixel(px.x+10,px.y+54);
                this._addButton("pandisc","pan-disc.png",px,discSize);
                this._addButton("zoomin","zoom-plus-mini.png",zoomPixel,zoomSize);
                this._addButton("zoomout","zoom-minus-mini.png",zoomPixel.add(0,zoomSize.h),zoomSize);
                return this.div
                },
            _addButton:function(id,img,xy,sz){
                var imgLocation=OpenLayers.Util.getImagesLocation()+img;
                var btn=OpenLayers.Util.createAlphaImageDiv(this.id+"_"+id,xy,sz,imgLocation,"absolute");
                this.div.appendChild(btn);
                OpenLayers.Event.observe(btn,"mousedown",OpenLayers.Function.bindAsEventListener(this.buttonDown,btn));
                OpenLayers.Event.observe(btn,"dblclick",OpenLayers.Function.bindAsEventListener(this.doubleClick,btn));
                OpenLayers.Event.observe(btn,"click",OpenLayers.Function.bindAsEventListener(this.doubleClick,btn));
                btn.action=id;
                btn.map=this.map;
                if(!this.slideRatio){
                    var slideFactorPixels=this.slideFactor;
                    var getSlideFactor=function(){
                        return slideFactorPixels
                        }
                    }else{
                var slideRatio=this.slideRatio;
                var getSlideFactor=function(dim){
                    return this.map.getSize()[dim]*slideRatio
                    }
                }
            btn.getSlideFactor=getSlideFactor;
        this.buttons.push(btn);
            return btn
            },
        _removeButton:function(btn){
            OpenLayers.Event.stopObservingElement(btn);
            btn.map=null;
            btn.getSlideFactor=null;
            this.div.removeChild(btn);
            OpenLayers.Util.removeItem(this.buttons,btn)
            },
        removeButtons:function(){
            for(var i=this.buttons.length-1;i>=0;--i){
                this._removeButton(this.buttons[i])
                }
            },
    doubleClick:function(evt){
        OpenLayers.Event.stop(evt);
        return false
        },
    buttonDown:function(evt){
        if(!OpenLayers.Event.isLeftClick(evt)){
            return
        }
        var origin={
            x:24,
            y:24
        };
        
        switch(this.action){
            case"pandisc":
                var y=0-(evt.layerY-origin.y);
                var x=evt.layerX-origin.x;
                if(y>x){
                if(y<-x){
                    this.map.pan(-this.getSlideFactor("w"),0)
                    }else{
                    this.map.pan(0,-this.getSlideFactor("h"))
                    }
                }else{
                if(y<-x){
                    this.map.pan(0,this.getSlideFactor("h"))
                    }else{
                    this.map.pan(this.getSlideFactor("w"),0)
                    }
                }
            break;
    case"pan":
        this.map.pan(0,-this.getSlideFactor("h"));
        break;
    case"pandown":
        this.map.pan(0,this.getSlideFactor("h"));
        break;
    case"panleft":
        this.map.pan(-this.getSlideFactor("w"),0);
        break;
    case"panright":
        this.map.pan(this.getSlideFactor("w"),0);
        break;
    case"zoomin":
        this.map.zoomIn();
        break;
    case"zoomout":
        this.map.zoomOut();
        break;
    case"zoomworld":
        this.map.zoomToMaxExtent();
        break
        }
        OpenLayers.Event.stop(evt)
    },
CLASS_NAME:"MF.PanZoom"
});
MF.PanZoom.X=4;
MF.PanZoom.Y=4
}
}());
(function(){
    MF.util.namespace("MF.map.mapfluence");
    MF.map.mapfluence.PanZoomBar=function(map,containerDiv){
        if(jQuery===undefined){
            throw"MF.map.mapfluence.PanZoomBar relies on jQuery"
            }
            var that={
            containerDiv:containerDiv,
            wrapper:null,
            panControl:null,
            zoomControl:null,
            maxZoom:19,
            inactiveOpacity:0.4,
            imgBase:"/mfjs/R2V2/modestmaps/images/"
        };
        
        that.wrapper=$('<div class="mm-pan-zoom-bar"></div>').fadeTo(0,that.inactiveOpacity);
        that.wrapper.hover(function(event){
            that.wrapper.stop().fadeTo("fast",1)
            },function(event){
            that.wrapper.stop().fadeTo("slow",that.inactiveOpacity)
            });
        $(containerDiv).append(that.wrapper);
        var panControl=$('<div class="mm-pan-disc"></div>');
        panControl.hover(function(event){
            panControl.addClass("hover")
            },function(event){
            panControl.removeClass("hover click");
            panControl.removeClass("north east south west")
            }).mousemove(function(event){
            var x=event.layerX;
            var y=event.layerY;
            var w=panControl.width();
            if(y>x){
                if(y>w-x){
                    panControl.removeClass("north east west");
                    panControl.addClass("south")
                    }else{
                    panControl.removeClass("north east south");
                    panControl.addClass("west")
                    }
                }else{
            if(y>w-x){
                panControl.removeClass("north west south");
                panControl.addClass("east")
                }else{
                panControl.removeClass("east south west");
                panControl.addClass("north")
                }
            }
        }).mousedown(function(event){
    panControl.addClass("click")
    }).mouseup(function(event){
    panControl.removeClass("click")
    }).click(function(event){
    var x=event.layerX;
    var y=event.layerY;
    var w=panControl.width();
    if(y>x){
        if(y>w-x){
            map.panDown()
            }else{
            map.panLeft()
            }
        }else{
    if(y>w-x){
        map.panRight()
        }else{
        map.panUp()
        }
    }
});
that.wrapper.append(panControl);
var zoomControl=$('<div class="mm-zoom-bar-wrapper"> <div class="mm-zoom-bar-plus"></div> <div class="mm-zoom-bar"><div class="mm-zoom-bar-slider"></div></div> <div class="mm-zoom-bar-minus"></div> </div>');
var zoomPlus=zoomControl.children(".mm-zoom-bar-plus");
var zoomMinus=zoomControl.children(".mm-zoom-bar-minus");
var zoomBar=zoomControl.children(".mm-zoom-bar");
var zoomSlider=zoomBar.children(".mm-zoom-bar-slider");
that.wrapper.append(zoomControl);
var sliderHalf=zoomSlider.height()/2;
var sliderMargin=(zoomBar.height()/that.maxZoom)/2;
var sliderTop=sliderMargin;
var sliderBottom=zoomBar.height()-sliderMargin;
var sliderHeight=sliderBottom-sliderTop;
var setZoomSlider=function(){
    var z=map.getZoom();
    var y=sliderBottom-((z/(that.maxZoom-1))*sliderHeight);
    zoomSlider.css("top",(y-sliderHalf)+"px")
    };
    
setZoomSlider();
map.addCallback("zoomed",function(map){
    setZoomSlider()
    });
zoomPlus.hover(function(event){
    zoomPlus.addClass("hover")
    },function(event){
    zoomPlus.removeClass("hover click")
    }).mousedown(function(event){
    zoomPlus.addClass("click")
    }).mouseup(function(event){
    zoomPlus.removeClass("click")
    }).click(function(event){
    var z=map.getZoom();
    z=Math.floor(z+1);
    map.setZoom(z)
    });
zoomMinus.hover(function(event){
    zoomMinus.addClass("hover")
    },function(event){
    zoomMinus.removeClass("hover click")
    }).mousedown(function(event){
    zoomMinus.addClass("click")
    }).mouseup(function(event){
    zoomMinus.removeClass("click")
    }).click(function(event){
    var z=map.getZoom();
    z=Math.floor(z-1);
    map.setZoom(z)
    });
zoomBar.click(function(event){
    var y=event.pageY-zoomBar.offset().top;
    if(y<sliderTop){
        y=sliderTop
        }else{
        if(y>sliderBottom){
            y=sliderBottom
            }
        }
    var z=(1-((y-sliderTop)/sliderHeight))*(that.maxZoom-1);
    map.setZoom(z)
    });
zoomBar.mousedown(function(event){
    var originalZoom=map.getZoom();
    var offset=zoomBar.offset();
    var onMouseMove=function(event){
        var x=event.pageX-offset.left;
        if(x<0||x>zoomBar.width()){
            map.setZoom(originalZoom);
            return false
            }
            var y=event.pageY-offset.top;
        if(y<sliderTop){
            y=sliderTop
            }else{
            if(y>sliderBottom){
                y=sliderBottom
                }
            }
        var z=(1-((y-sliderTop)/sliderHeight))*(that.maxZoom-1);
    map.setZoom(z);
    return false
    };
    
var onMouseUp=function(event){
    $("body").unbind("mousemove",onMouseMove).unbind("mouseup".onMouseUp);
    var x=event.pageX-zoomBar.offset().left;
    if(x<0||x>zoomBar.width()){
        map.setZoom(originalZoom)
        }
        return false
    };
    
var y=event.pageY-offset.top;
if(y<sliderTop){
    y=sliderTop
    }else{
    if(y>sliderBottom){
        y=sliderBottom
        }
    }
var z=(1-((y-sliderTop)/sliderHeight))*(that.maxZoom-1);
map.setZoom(z);
$("body").mousemove(onMouseMove).mouseup(onMouseUp);
return false
});
return that
}
}());
(function(){
    var newSchool=false;
    try{
        newSchool=com.modestmaps.Map.prototype.addLayer?true:false
        }catch(e){}
    MF.util.namespace("MF.map.mapfluence");
    MF.map.mapfluence.Manager=function(mapDiv,options){
        var that=MF.map.base.Manager(mapDiv,options);
        if(!newSchool&&!com.modestmaps.TileProvider){
            com.modestmaps.TileProvider=com.modestmaps.MapProvider
            }
            that.type="ModestMaps";
        that.map=null;
        that.layers=[];
        that.baseId=mapDiv.id;
        that.mapWrapper=document.createElement("div");
        that.mapWrapper.id=that.baseId+"-map-wrapper";
        that.mapWrapper.style.width="100%";
        that.mapWrapper.style.height="100%";
        mapDiv.appendChild(that.mapWrapper);
        var lng=(options&&options.hasOwnProperty("lngCenter"))?options.lngCenter:-110;
        var lat=(options&&options.hasOwnProperty("latCenter"))?options.latCenter:38;
        var zoom=(options&&options.hasOwnProperty("zoom"))?options.zoom:2;
        var style=(options&&options.hasOwnProperty("style"))?options.style:"base";
        var layers=[];
        switch(style){
            case"land-only":
                layers=[MF.layer.tile.Named({
                from:MF.layer.tile.Named.Layers.MF_LAND
                })];
            break;
            case"base-with-labels":
                layers=[MF.layer.tile.Named({
                from:MF.layer.tile.Named.Layers.MF_ALL
                })];
            break;
            case"base":default:
                layers=[MF.layer.tile.Named({
                from:MF.layer.tile.Named.Layers.MF_LAND
                }),MF.layer.tile.Named({
                from:MF.layer.tile.Named.Layers.MF_ROADS
                }),MF.layer.tile.Named({
                from:MF.layer.tile.Named.Layers.MF_COUNTRY_BOUNDARIES
                })];
            break
            }
            var baseLayer=MF.layer.tile.Composite({
            layers:layers
        });
        that.compLayer=MF.layer.tile.Composite({
            layers:[baseLayer]
            });
        that.tileAdapter=MF.map.mapfluence.TileAdapter();
        that.vectorAdapter=MF.map.mapfluence.VectorAdapter();
        that.basemapProvider=that.tileAdapter.adaptLayer(that.compLayer);
        if(newSchool){
            that.map=new com.modestmaps.Map(that.mapWrapper,that.basemapProvider,{
                eventHandlers:[new AnyZoomHandler()]
                })
            }else{
            that.map=new com.modestmaps.Map(that.mapWrapper,that.basemapProvider,null,[new AnyZoomHandler()])
            }
            that.destroy=function(){
            that.map.destroy();
            that.map=null;
            that.layers=[]
            };
            
        that.getOptions=function(){
            var opts={};
            
            opts.zoom=that.map.getZoom();
            var center=that.map.getCenter();
            opts.latCenter=center.lat;
            opts.lngCenter=center.lon;
            return opts
            };
            
        that.setOptions=function(opts){
            if(opts.latCenter!==undefined&&opts.lngCenter!==undefined){
                that.map.setCenter(new com.modestmaps.Location(opts.latCenter,opts.lngCenter))
                }
                if(opts.zoom!==undefined){
                that.map.setZoom(opts.zoom)
                }
            };
        
    that.addLayer=function(layer,options){
        var provider;
        if(newSchool){
            provider=(layer.layerType==="vector")?that.vectorAdapter.adaptLayer(layer,options):that.tileAdapter.adaptLayer(layer,options);
            that.map.addLayer(provider);
            that.layers.push({
                mfLayer:layer,
                clientLayer:provider
            })
            }else{
            var layers=that.compLayer.get("layers");
            layers.push(layer);
            that.map.setProvider(that.basemapProvider)
            }
            return layer
        };
        
    that.removeLayer=function(layer){
        var i=that.layers.length;
        for(var i=0;i<that.layers.length;i++){
            if(that.layers[i].mfLayer==layer){
                that.map.removeLayer(that.layers[i].clientLayer);
                MF.util.sliceArray(that.layers,i);
                return i
                }
            }
        };
    
that.refreshLayer=function(layer){
    alert("not yet implemented");
    throw"not yet implemented";
    that.map.setProvider(that.basemapProvider)
    };
    
that.map.setCenterZoom(new com.modestmaps.Location(lat,lng),zoom);
    that.panZoomBar=MF.map.mapfluence.PanZoomBar(that.map,mapDiv);
    that.attribution=MF.map.mapfluence.Attribution(mapDiv,'Map data &copy; 2011 <a href="http://developer.urbanmapping.com/content/Mapfluence-Attribution-and-Copyright-Information">Urban Mapping and partners</a><br/><a href="http://www.openstreetmap.org/">OpenStreetMap</a> and contributors <a href="http://creativecomons.org/licenses/by-sa/2.0/">cc by sa</a>');
    return that
    }
}());
var AnyZoomHandler=function(map){
    if(map!==undefined){
        this.init(map)
        }
        this.last=0
    };
    
var bug40441=/WebKit\/533/.test(navigator.userAgent)?-1:0;
AnyZoomHandler.prototype={
    init:function(map){
        this.map=map;
        com.modestmaps.addEvent(map.parent,"dblclick",this.getDoubleClick());
        com.modestmaps.addEvent(map.parent,"mousedown",this.getMouseDown());
        com.modestmaps.addEvent(map.parent,"mousewheel",this.getMouseWheel())
        },
    mouseDownHandler:null,
    getMouseDown:function(){
        if(!this.mouseDownHandler){
            var theHandler=this;
            this.mouseDownHandler=function(e){
                com.modestmaps.addEvent(document,"mouseup",theHandler.getMouseUp());
                com.modestmaps.addEvent(document,"mousemove",theHandler.getMouseMove());
                theHandler.prevMouse=new com.modestmaps.Point(e.clientX,e.clientY);
                theHandler.map.parent.style.cursor="move";
                return com.modestmaps.cancelEvent(e)
                }
            }
        return this.mouseDownHandler
    },
mouseMoveHandler:null,
getMouseMove:function(){
    if(!this.mouseMoveHandler){
        var theHandler=this;
        this.mouseMoveHandler=function(e){
            if(theHandler.prevMouse){
                theHandler.map.panBy(e.clientX-theHandler.prevMouse.x,e.clientY-theHandler.prevMouse.y);
                theHandler.prevMouse.x=e.clientX;
                theHandler.prevMouse.y=e.clientY
                }
                return com.modestmaps.cancelEvent(e)
            }
        }
    return this.mouseMoveHandler
},
mouseUpHandler:null,
getMouseUp:function(){
    if(!this.mouseUpHandler){
        var theHandler=this;
        this.mouseUpHandler=function(e){
            com.modestmaps.removeEvent(document,"mouseup",theHandler.getMouseUp());
            com.modestmaps.removeEvent(document,"mousemove",theHandler.getMouseMove());
            theHandler.prevMouse=null;
            theHandler.map.parent.style.cursor="";
            return com.modestmaps.cancelEvent(e)
            }
        }
    return this.mouseUpHandler
},
mouseWheelHandler:null,
getMouseWheel:function(){
    if(!this.mouseWheelHandler){
        var theHandler=this;
        this.mouseWheelHandler=function(e){
            var delta=0;
            if(e.wheelDelta){
                delta=e.wheelDelta/120
                }else{
                if(e.detail){
                    delta=-e.detail/3
                    }
                }
            delta*=0.1;
        if(bug40441<0){
            var now=new Date().getTime(),since=now-this.last;
            if((since>9)&&(Math.abs(e.wheelDelta)/since>=50)){
                bug40441=1
                }
                this.last=now
            }
            if(bug40441==1){
            delta*=0.03
            }
            var point=theHandler.getMousePoint(e);
        theHandler.map.zoomByAbout(delta,point);
        return com.modestmaps.cancelEvent(e)
        }
    }
return this.mouseWheelHandler
},
doubleClickHandler:null,
getDoubleClick:function(){
    if(!this.doubleClickHandler){
        var theHandler=this;
        this.doubleClickHandler=function(e){
            var point=theHandler.getMousePoint(e);
            theHandler.map.zoomByAbout(e.shiftKey?-1:1,point);
            return com.modestmaps.cancelEvent(e)
            }
        }
    return this.doubleClickHandler
},
getMousePoint:function(e){
    var point=new com.modestmaps.Point(e.clientX,e.clientY);
    point.x+=document.body.scrollLeft+document.documentElement.scrollLeft;
    point.y+=document.body.scrollTop+document.documentElement.scrollTop;
    for(var node=this.map.parent;node;node=node.offsetParent){
        point.x-=node.offsetLeft;
        point.y-=node.offsetTop
        }
        return point
    }
};
(function(){
    MF.util.namespace("MF.map.mapfluence");
    MF.map.mapfluence.Canvas=function(opts,secret){
        if(!map){
            throw"map is a required argument."
            }
            var secret=secret||{};
        
        var that={
            width:opts.width,
            height:opts.height,
            fillStyle:opts.fillStyle||"rgba(255,0,0,0.25)",
            strokeStyle:opts.strokeStyle||"black",
            draw:function(){
                alert("draw needs to be overridden in child class of MF.map.mapfluence.Canvas.");
                throw"draw needs to be overridden in child class of MF.map.mapfluence.Canvas."
                }
            };
        
    return that
    };
    
MF.map.mapfluence.RaphaelCanvas=function(container,opts,secret){
    if(!Raphael){
        throw"raphael must be loaded first"
        }
        var that=MF.map.mapfluence.Canvas(opts,secret);
    that.paper=Raphael(container,width,height);
    that.draw=function(){
        alert("draw not yet implemented for RaphaelCanvas");
        throw"draw not yet implemented for RaphaelCanvas"
        };
        
    return that
    }
}());
(function(){
    MF.util.namespace("MF.map.mapfluence");
    MF.map.mapfluence.Attribution=function(containerDiv,attributionText){
        if(jQuery===undefined){
            throw"MF.map.mapfluence.Attribution relies on jQuery"
            }
            var that={
            wrapper:null,
            inactiveOpacity:0.4
        };
        
        that.wrapper=$('<div class="mm-attribution">'+attributionText+"</div>").fadeTo(0,that.inactiveOpacity);
        that.wrapper.hover(function(event){
            that.wrapper.stop().fadeTo("fast",1)
            },function(event){
            that.wrapper.stop().fadeTo("slow",that.inactiveOpacity)
            });
        $(containerDiv).append(that.wrapper);
        return that
        }
    }());
(function(){
    MF.util.namespace("MF.map.mapfluence");
    MF.map.mapfluence.TileAdapter=function(secret){
        var secret=secret||{};
        
        var that=MF.map.base.Adapter(secret);
        that.adaptLayer=function(mfLayer,options){
            var provider;
            if(mfLayer.layerType!=="tile"){
                throw"only tile layers can be adapted by TileAdapter"
                }
                provider=new com.modestmaps.TileProvider(function(coord){
                var zoom=parseInt(coord.zoom);
                var maxDim=1<<zoom;
                var y=parseInt(coord.row);
                if(y<0||y>=maxDim){
                    return null
                    }
                    var x=parseInt(coord.column)%maxDim;
                if(x<0){
                    x+=maxDim
                    }
                    var opts={
                    x:x,
                    y:y,
                    z:zoom,
                    tileType:"g"
                };
                
                return mfLayer.getTileUrl(opts)
                });
            return provider
            };
            
        return that
        }
    }());
(function(){
    MF.util.namespace("MF.map.mapfluence");
    var svgns=svgns||"http://www.w3.org/2000/svg";
    MF.map.mapfluence.VectorAdapter=function(opts,secret){
        var secret=secret||{},that=MF.map.base.Adapter(opts,secret);
        var useRaphael=false;
        that.adaptLayer=function(mfLayer,options){
            var provider;
            if(mfLayer.layerType!=="vector"){
                throw"only vector layers can be adapted by VectorAdapter"
                }
                if(useRaphael){
                MF.console.log("Raphael: "+Raphael.type);
                if(Raphael.type!=="SVG"){
                    throw"only SVG supported in Raphael. Please try SVGWeb."
                    }
                }
            var sq=MF.query.Spatial({
            select:mfLayer.get("select"),
            from:mfLayer.get("from"),
            where:mfLayer.get("where"),
            format:"geojson"
        });
        var queryUrl=sq.toUrlString();
        function lng2x(b,map_center_lng){
            return b-map_center_lng
            }
            function y2lat(a){
            return 180/Math.PI*(2*Math.atan(Math.exp(a*Math.PI/180))-Math.PI/2)
            }
            function lat2y(a){
            return 180/Math.PI*Math.log(Math.tan(Math.PI/4+a*(Math.PI/180)/2))
            }
            var callback=function(){
            var proj900913=new OpenLayers.Projection("EPSG:900913");
            var proj4326=new OpenLayers.Projection("EPSG:4326");
            var point=new OpenLayers.LonLat(-71,42);
            point.transform(proj4326,proj900913);
            console.log("point "+point);
            console.log(""+arguments[0].data.type);
            console.log(""+arguments[0].data.features.length);
            console.log(""+arguments[0].data.features[0].type);
            console.log(""+arguments[0].data.features[0].geometry.type);
            console.log(""+arguments[0].data.features[0].geometry.coordinates.length);
            console.log(""+arguments[0].data.features[0].geometry.coordinates[0].length);
            console.log(""+arguments[0].data.features[0].geometry.coordinates[0][0].length);
            console.log(""+arguments[0].data.features[0].geometry.coordinates[0][0][0].length);
            console.log(""+arguments[0].data.features[0].geometry.coordinates[0][0][0][0]);
            var lng=arguments[0].data.features[0].geometry.coordinates[0][0][0][0];
            var lat=arguments[0].data.features[0].geometry.coordinates[0][0][0][1];
            var point2=new OpenLayers.LonLat(lng,lat);
            console.log("Point pre-transform "+point2);
            var y=lat2y(lat),x=lng2x(lng,0);
            console.log("lat2y "+y+" lat2x "+x);
            var gmercextent=20037508.34;
            var tileHeight=map.tileDimensions.x;
            var tileWidth=map.tileDimensions.y;
            var curZoom=Math.round(map.coordinate.zoom);
            var scale=1/Math.pow(2,map.coordinate.zoom-curZoom);
            var topLeftCoord=map.pointCoordinate(new MM.Point(0,0));
            var bottomRightCoord=map.pointCoordinate(map.dimensions);
            var cw=(bottomRightCoord.column-topLeftCoord.column)*tileWidth;
            var ch=(bottomRightCoord.row-topLeftCoord.row)*tileHeight;
            var x=topLeftCoord.column*tileWidth*scale;
            var y=topLeftCoord.row*tileHeight*scale;
            var w=cw*scale;
            var h=ch*scale;
            if(useRaphael){
                if(Raphael.type=="SVG"){
                    paper.canvas.setAttribute("viewBox",x+" "+y+" "+w+" "+h)
                    }
                }else{
            paper.setAttributeNS(null,"width",2*gmercextent+"px");
            paper.setAttributeNS(null,"height",2*gmercextent+"px");
            paper.setAttributeNS(null,"viewBox",gmercextent+" "+-gmercextent+" "+w+" "+h)
            }
        };
    
var fetchData=function(){
    MF.request.proxy.executeRemoteCall(queryUrl,callback)
    };
    
that.delayedDraw=function(map,paper,geoms){};
    
    that.draw=function(map,paper){
    fetchData();
    if(paper.childNodes.length===0){
        if(useRaphael){
            paper.rect(x+100,y+100,w-200,h-200);
            var n=200;
            var rScale=0.25;
            var a,b,r;
            for(var i=0;i<n;i++){
                r=(i+1)*rScale;
                a=r+Math.floor(Math.random()*(w-2*r));
                b=r+Math.floor(Math.random()*(h-2*r));
                if(Raphael.type=="SVG"){
                    a+=x;
                    b+=y
                    }
                    paper.circle(a,b,r)
                }
            }else{
        var obj=document.createElementNS(svgns,"rect");
        obj.setAttribute("x",x+100);
        obj.setAttribute("y",y+100);
        obj.setAttribute("width",w-200);
        obj.setAttribute("height",h-200);
        obj.setAttribute("fill","#000");
        obj.setAttribute("fill-opacity",0.5);
        paper.appendChild(obj);
        var n=200;
        var rScale=0.25;
        var a,b,r;
        for(var i=0;i<n;i++){
            r=(i+1)*rScale;
            a=r+Math.floor(Math.random()*(w-2*r));
            b=r+Math.floor(Math.random()*(h-2*r));
            obj=document.createElementNS(svgns,"circle");
            obj.setAttribute("cx",x+a);
            obj.setAttribute("cy",y+b);
            obj.setAttribute("r",r);
            obj.setAttribute("fill","#000");
            obj.setAttribute("fill-opacity",0.5);
            paper.appendChild(obj);
            obj.addEventListener("mouseover",function(e){
                e.target.setAttribute("fill","#f00")
                },false);
            obj.addEventListener("mouseout",function(e){
                e.target.setAttribute("fill","#000")
                },false)
            }
        }
    }
};

provider=new com.modestmaps.VectorProvider(function(map,container){
    var isNew=false;
    if(container.paper===undefined){
        if(useRaphael){
            container.paper=Raphael(container,cw,ch)
            }else{
            container.paper=document.createElementNS(svgns,"svg");
            container.paper.setAttribute("version","1.1");
            if(window.svgweb){
                container.paper.addEventListener("SVGLoad",function(evt){
                    container.paper=this;
                    that.draw(map,this)
                    });
                window.svgweb.appendChild(container.paper,container);
                return
            }else{
                container.appendChild(container.paper)
                }
            }
    }
that.draw(map,container.paper)
});
return provider
};

return that
}
}());
(function(){
    MF.util.namespace("MF.property");
    MF.property.Color=function(value,secret){
        var secret=secret||{},that=MF.property.Flex(secret);
        that.validate=function(arg){
            if(typeof arg!=="string"){
                throw"Color must be an String, not "+typeof arg
                }
                secret.composedProperty=MF.property.Enumeration(MF.property.Color.CSSColors);
            try{
                secret.composedProperty.validate(arg.toLowerCase());
                return
            }catch(error){
                if(arg.length>=3&&arg.length!==5&&arg.length<=8){
                    var regex=new RegExp("^([0-9A-F]+)$","i");
                    if(regex.test(arg.toString())){
                        secret.composedProperty=MF.property.String();
                        return
                    }
                }
            }
        throw"The value '"+arg+"' was not a valid color."
    };
    
that.toUrlString=function(){
    if(that.get()===null||that.get()===undefined){
        return""
        }
        var str=that.get().toLowerCase();
    if(MF.property.Color.CSSColors[str]!==undefined){
        return encodeURIComponent(MF.property.Color.CSSColors[str])
        }else{
        return encodeURIComponent(str)
        }
    };

return that.initialize(value)
    };
    
MF.property.ColorSize=function(value,secret){
    var secret=secret||{},that=MF.property.Composed(secret);
    secret.properties.color=MF.property.Color();
    secret.properties.size=MF.property.PositiveNumber();
    that.toString=function(){
        var str=that.get("color");
        if(str===undefined||str===null){
            return""
            }
            if(that.get("size")!==undefined){
            str=str+"_"+that.get("size")
            }
            return str
        };
        
    that.toUrlString=function(){
        if(that.get("color")===undefined){
            return""
            }
            var str=secret.properties.color.toUrlString();
        if(that.get("size")!==undefined){
            str=str+"_"+that.get("size")
            }
            return str
        };
        
    return that.initialize(value)
    };
    
MF.property.ColorStyle=function(value,secret){
    var secret=secret||{},that=MF.property.Flex(secret);
    that.validate=function(arg){
        if(typeof arg==="string"){
            secret.composedProperty=MF.property.Color()
            }else{
            if(typeof arg==="object"){
                secret.composedProperty=MF.property.ColorSize()
                }else{
                throw"Argument for ColorStyle must be an object or string, not "+typeof arg
                }
            }
        secret.composedProperty.validate(arg)
    };
    
return that.initialize(value)
};

MF.property.Icon=function(value){
    var that=MF.property.String();
    return that.initialize(value)
    };
    
MF.property.IconStyle=function(value,secret){
    var secret=secret||{},that=MF.property.Composed(secret);
    secret.properties.icon=MF.property.String();
    secret.properties.size=MF.property.PositiveInteger();
    secret.properties.height=MF.property.PositiveInteger();
    secret.properties.width=MF.property.PositiveInteger();
    that.toString=function(){
        var size=(that.get("width")&&that.get("height"))?that.get("width")+"x"+that.get("height"):that.get("size");
        return that.get("icon")+((size!==undefined)?("_"+size):"")
        };
        
    that.toUrlString=that.toString;
    return that.initialize(value)
    };
    
MF.property.Style=function(value,secret){
    var secret=secret||{},that=MF.property.Flex(secret);
    that.validate=function(arg){
        var type=MF.util.typeOf(arg);
        if(type!=="object"&&type!="string"){
            throw"Argument for Style must be an object or string, not "+typeof arg
            }
            if(type=="string"||arg.color!==undefined){
            secret.composedProperty=MF.property.ColorStyle()
            }else{
            if(arg.icon!==undefined){
                secret.composedProperty=MF.property.IconStyle()
                }else{
                throw"Style must be a valid ColorStyle or IconStyle object."
                }
            }
        secret.composedProperty.validate(arg)
    };
    
return that.initialize(value)
};

MF.property.Color.CSSColors={
    aliceblue:"F0F8FF",
    antiquewhite:"FAEBD7",
    aqua:"00FFFF",
    aquamarine:"7FFFD4",
    azure:"F0FFFF",
    beige:"F5F5DC",
    bisque:"FFE4C4",
    black:"000000",
    blanchedalmond:"FFEBCD",
    blue:"0000FF",
    blueviolet:"8A2BE2",
    brown:"A52A2A",
    burlywood:"DEB887",
    cadetblue:"5F9EA0",
    chartreuse:"7FFF00",
    chocolate:"D2691E",
    coral:"FF7F50",
    cornflowerblue:"6495ED",
    cornsilk:"FFF8DC",
    crimson:"DC143C",
    cyan:"00FFFF",
    darkblue:"00008B",
    darkcyan:"008B8B",
    darkgoldenrod:"B8860B",
    darkgray:"A9A9A9",
    darkgrey:"A9A9A9",
    darkgreen:"006400",
    darkkhaki:"BDB76B",
    darkmagenta:"8B008B",
    darkolivegreen:"556B2F",
    darkorange:"FF8C00",
    darkorchid:"9932CC",
    darkred:"8B0000",
    darksalmon:"E9967A",
    darkseagreen:"8FBC8F",
    darkslateblue:"483D8B",
    darkslategray:"2F4F4F",
    darkslategrey:"2F4F4F",
    darkturquoise:"00CED1",
    darkviolet:"9400D3",
    deeppink:"FF1493",
    deepskyblue:"00BFFF",
    dimgray:"696969",
    dimgrey:"696969",
    dodgerblue:"1E90FF",
    firebrick:"B22222",
    floralwhite:"FFFAF0",
    forestgreen:"228B22",
    fuchsia:"FF00FF",
    gainsboro:"DCDCDC",
    ghostwhite:"F8F8FF",
    gold:"FFD700",
    goldenrod:"DAA520",
    gray:"808080",
    grey:"808080",
    green:"008000",
    greenyellow:"ADFF2F",
    honeydew:"F0FFF0",
    hotpink:"FF69B4",
    "indianred ":"CD5C5C",
    "indigo ":"4B0082",
    ivory:"FFFFF0",
    khaki:"F0E68C",
    lavender:"E6E6FA",
    lavenderblush:"FFF0F5",
    lawngreen:"7CFC00",
    lemonchiffon:"FFFACD",
    lightblue:"ADD8E6",
    lightcoral:"F08080",
    lightcyan:"E0FFFF",
    lightgoldenrodyellow:"FAFAD2",
    lightgray:"D3D3D3",
    lightgrey:"D3D3D3",
    lightgreen:"90EE90",
    lightpink:"FFB6C1",
    lightsalmon:"FFA07A",
    lightseagreen:"20B2AA",
    lightskyblue:"87CEFA",
    lightslategray:"778899",
    lightslategrey:"778899",
    lightsteelblue:"B0C4DE",
    lightyellow:"FFFFE0",
    lime:"00FF00",
    limegreen:"32CD32",
    linen:"FAF0E6",
    magenta:"FF00FF",
    maroon:"800000",
    mediumaquamarine:"66CDAA",
    mediumblue:"0000CD",
    mediumorchid:"BA55D3",
    mediumpurple:"9370D8",
    mediumseagreen:"3CB371",
    mediumslateblue:"7B68EE",
    mediumspringgreen:"00FA9A",
    mediumturquoise:"48D1CC",
    mediumvioletred:"C71585",
    midnightblue:"191970",
    mintcream:"F5FFFA",
    mistyrose:"FFE4E1",
    moccasin:"FFE4B5",
    navajowhite:"FFDEAD",
    navy:"000080",
    oldlace:"FDF5E6",
    olive:"808000",
    olivedrab:"6B8E23",
    orange:"FFA500",
    orangered:"FF4500",
    orchid:"DA70D6",
    palegoldenrod:"EEE8AA",
    palegreen:"98FB98",
    paleturquoise:"AFEEEE",
    palevioletred:"D87093",
    papayawhip:"FFEFD5",
    peachpuff:"FFDAB9",
    peru:"CD853F",
    pink:"FFC0CB",
    plum:"DDA0DD",
    powderblue:"B0E0E6",
    purple:"800080",
    red:"FF0000",
    rosybrown:"BC8F8F",
    royalblue:"4169E1",
    saddlebrown:"8B4513",
    salmon:"FA8072",
    sandybrown:"F4A460",
    seagreen:"2E8B57",
    seashell:"FFF5EE",
    sienna:"A0522D",
    silver:"C0C0C0",
    skyblue:"87CEEB",
    slateblue:"6A5ACD",
    slategray:"708090",
    slategrey:"708090",
    snow:"FFFAFA",
    springgreen:"00FF7F",
    steelblue:"4682B4",
    tan:"D2B48C",
    teal:"008080",
    thistle:"D8BFD8",
    tomato:"FF6347",
    turquoise:"40E0D0",
    violet:"EE82EE",
    wheat:"F5DEB3",
    white:"FFFFFF",
    whitesmoke:"F5F5F5",
    yellow:"FFFF00",
    yellowgreen:"9ACD32"
}
}());
(function(){
    var root=MF.jsRoot("mfjs.js"),min=false,isLocal=false,loc,headID,cssNode;
    if(!root){
        root=MF.jsRoot("mfjs.min.js");
        min=true
        }
        if(MF.Globals.LOCAL){
        min=false;
        isLocal=true
        }
        loc=isLocal?root+"mfjs.dev.css":root+"mfjs"+(min?".min":"")+".css";
    headID=document.getElementsByTagName("head")[0];
    cssNode=document.createElement("link");
    cssNode.type="text/css";
    cssNode.rel="stylesheet";
    cssNode.href=loc;
    headID.appendChild(cssNode)
    }());
(function(){
    if(MF.Globals.onMFJSReady){
        if(typeof MF.Globals.onMFJSReady==="function"){
            MF.Globals.onMFJSReady()
            }
        }
}());